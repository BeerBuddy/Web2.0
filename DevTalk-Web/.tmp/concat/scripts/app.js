'use strict';

angular.module('devTalkApp', ['LocalStorageModule', 'tmh.dynamicLocale', 'pascalprecht.translate', 
               'ui.bootstrap', // for modal dialogs
    'ngResource', 'ui.router', 'ngCookies', 'ngAria', 'ngCacheBuster', 'ngFileUpload', 'infinite-scroll'])

    .run(["$rootScope", "$location", "$window", "$http", "$state", "$translate", "Language", "Auth", "Principal", "ENV", "VERSION", function ($rootScope, $location, $window, $http, $state, $translate, Language, Auth, Principal, ENV, VERSION) {
        $rootScope.ENV = ENV;
        $rootScope.VERSION = VERSION;
        $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            $rootScope.toState = toState;
            $rootScope.toStateParams = toStateParams;

            if (Principal.isIdentityResolved()) {
                Auth.authorize();
            }
            
            // Update the language
            Language.getCurrent().then(function (language) {
                $translate.use(language);
            });
            
        });

        $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {
            var titleKey = 'global.title' ;

            // Remember previous state unless we've been redirected to login or we've just
            // reset the state memory after logout. If we're redirected to login, our
            // previousState is already set in the authExpiredInterceptor. If we're going
            // to login directly, we don't want to be sent to some previous state anyway
            if (toState.name != 'login' && $rootScope.previousStateName) {
              $rootScope.previousStateName = fromState.name;
              $rootScope.previousStateParams = fromParams;
            }

            // Set the page title key to the one configured in state or use default one
            if (toState.data.pageTitle) {
                titleKey = toState.data.pageTitle;
            }
            
            $translate(titleKey).then(function (title) {
                // Change window title with translated one
                $window.document.title = title;
            });
            
        });

        $rootScope.back = function() {
            // If previous state is 'activate' or do not exist go to 'home'
            if ($rootScope.previousStateName === 'activate' || $state.get($rootScope.previousStateName) === null) {
                $state.go('home');
            } else {
                $state.go($rootScope.previousStateName, $rootScope.previousStateParams);
            }
        };
    }])
    .config(["$stateProvider", "$urlRouterProvider", "$httpProvider", "$locationProvider", "$translateProvider", "tmhDynamicLocaleProvider", "httpRequestInterceptorCacheBusterProvider", function ($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider, $translateProvider, tmhDynamicLocaleProvider, httpRequestInterceptorCacheBusterProvider) {

        //Cache everything except rest api requests
        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);

        $urlRouterProvider.otherwise('/');
        $stateProvider.state('site', {
            'abstract': true,
            views: {
                'navbar@': {
                    templateUrl: 'scripts/components/navbar/navbar.html',
                    controller: 'NavbarController'
                }
            },
            resolve: {
                authorize: ['Auth',
                    function (Auth) {
                        return Auth.authorize();
                    }
                ],
                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                    $translatePartialLoader.addPart('global');
                }]
            }
        });

        $httpProvider.interceptors.push('errorHandlerInterceptor');
        $httpProvider.interceptors.push('authExpiredInterceptor');
        $httpProvider.interceptors.push('authInterceptor');
        $httpProvider.interceptors.push('notificationInterceptor');
        
        // Initialize angular-translate
        $translateProvider.useLoader('$translatePartialLoader', {
            urlTemplate: 'i18n/{lang}/{part}.json'
        });

        $translateProvider.preferredLanguage('en');
        $translateProvider.useCookieStorage();
        $translateProvider.useSanitizeValueStrategy('escaped');
        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');

        tmhDynamicLocaleProvider.localeLocationPattern('bower_components/angular-i18n/angular-locale_{{locale}}.js');
        tmhDynamicLocaleProvider.useCookieStorage();
        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');
        
    }]);

"use strict";
// DO NOT EDIT THIS FILE, EDIT THE GRUNT TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE
angular.module('devTalkApp')

.constant('ENV', 'prod')

.constant('VERSION', '0.0.1-SNAPSHOT')

;
"use strict";
// DO NOT EDIT THIS FILE, EDIT THE GRUNT TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE
angular.module('devTalkApp')

.constant('ENV', 'dev')

.constant('VERSION', '0.0.1-SNAPSHOT')

;
'use strict';

angular.module('devTalkApp')
    .factory('Auth', ["$rootScope", "$state", "$q", "$translate", "Principal", "AuthServerProvider", "Account", "Register", "Activate", "Password", "PasswordResetInit", "PasswordResetFinish", function Auth($rootScope, $state, $q, $translate, Principal, AuthServerProvider, Account, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {
        return {
            login: function (credentials, callback) {
                var cb = callback || angular.noop;
                var deferred = $q.defer();

                AuthServerProvider.login(credentials).then(function (data) {
                    // retrieve the logged account information
                    Principal.identity(true).then(function(account) {
                        // After the login the language will be changed to
                        // the language selected by the user during his registration
                        $translate.use(account.langKey).then(function(){
                            $translate.refresh();
                        });
                        deferred.resolve(data);
                    });
                    return cb();
                }).catch(function (err) {
                    this.logout();
                    deferred.reject(err);
                    return cb(err);
                }.bind(this));

                return deferred.promise;
            },

            logout: function () {
                AuthServerProvider.logout();
                Principal.authenticate(null);
                // Reset state memory
                $rootScope.previousStateName = undefined;
                $rootScope.previousStateNameParams = undefined;
            },

            authorize: function(force) {
                return Principal.identity(force)
                    .then(function() {
                        var isAuthenticated = Principal.isAuthenticated();

                        // an authenticated user can't access to login and register pages
                        if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {
                            $state.go('home');
                        }

                        if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {
                            if (isAuthenticated) {
                                // user is signed in but not authorized for desired state
                                $state.go('accessdenied');
                            }
                            else {
                                // user is not authenticated. stow the state they wanted before you
                                // send them to the signin state, so you can return them when you're done
                                $rootScope.previousStateName = $rootScope.toState;
                                $rootScope.previousStateNameParams = $rootScope.toStateParams;

                                // now, send them to the signin state so they can log in
                                $state.go('login');
                            }
                        }
                    });
            },
            createAccount: function (account, callback) {
                var cb = callback || angular.noop;

                return Register.save(account,
                    function () {
                        return cb(account);
                    },
                    function (err) {
                        this.logout();
                        return cb(err);
                    }.bind(this)).$promise;
            },

            updateAccount: function (account, callback) {
                var cb = callback || angular.noop;

                return Account.save(account,
                    function () {
                        return cb(account);
                    },
                    function (err) {
                        return cb(err);
                    }.bind(this)).$promise;
            },

            activateAccount: function (key, callback) {
                var cb = callback || angular.noop;

                return Activate.get(key,
                    function (response) {
                        return cb(response);
                    },
                    function (err) {
                        return cb(err);
                    }.bind(this)).$promise;
            },

            changePassword: function (newPassword, callback) {
                var cb = callback || angular.noop;

                return Password.save(newPassword, function () {
                    return cb();
                }, function (err) {
                    return cb(err);
                }).$promise;
            },

            resetPasswordInit: function (mail, callback) {
                var cb = callback || angular.noop;

                return PasswordResetInit.save(mail, function() {
                    return cb();
                }, function (err) {
                    return cb(err);
                }).$promise;
            },

            resetPasswordFinish: function(keyAndPassword, callback) {
                var cb = callback || angular.noop;

                return PasswordResetFinish.save(keyAndPassword, function () {
                    return cb();
                }, function (err) {
                    return cb(err);
                }).$promise;
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('Principal', ["$q", "Account", function Principal($q, Account) {
        var _identity,
            _authenticated = false;

        return {
            isIdentityResolved: function () {
                return angular.isDefined(_identity);
            },
            isAuthenticated: function () {
                return _authenticated;
            },
            hasAuthority: function (authority) {
                if (!_authenticated) {
                    return $q.when(false);
                }

                return this.identity().then(function(_id) {
                    return _id.authorities && _id.authorities.indexOf(authority) !== -1;
                }, function(err){
                    return false;
                });
            },
            hasAnyAuthority: function (authorities) {
                if (!_authenticated || !_identity || !_identity.authorities) {
                    return false;
                }

                for (var i = 0; i < authorities.length; i++) {
                    if (_identity.authorities.indexOf(authorities[i]) !== -1) {
                        return true;
                    }
                }

                return false;
            },
            authenticate: function (identity) {
                _identity = identity;
                _authenticated = identity !== null;
            },
            identity: function (force) {
                var deferred = $q.defer();

                if (force === true) {
                    _identity = undefined;
                }

                // check and see if we have retrieved the identity data from the server.
                // if we have, reuse it by immediately resolving
                if (angular.isDefined(_identity)) {
                    deferred.resolve(_identity);

                    return deferred.promise;
                }

                // retrieve the identity data from the server, update the identity object, and then resolve.
                Account.get().$promise
                    .then(function (account) {
                        _identity = account.data;
                        _authenticated = true;
                        deferred.resolve(_identity);
                    })
                    .catch(function() {
                        _identity = null;
                        _authenticated = false;
                        deferred.resolve(_identity);
                    });
                return deferred.promise;
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .directive('hasAnyAuthority', ['Principal', function (Principal) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var setVisible = function () {
                        element.removeClass('hidden');
                    },
                    setHidden = function () {
                        element.addClass('hidden');
                    },
                    defineVisibility = function (reset) {
                        var result;
                        if (reset) {
                            setVisible();
                        }

                        result = Principal.hasAnyAuthority(authorities);
                        if (result) {
                            setVisible();
                        } else {
                            setHidden();
                        }
                    },
                    authorities = attrs.hasAnyAuthority.replace(/\s+/g, '').split(',');

                if (authorities.length > 0) {
                    defineVisibility(true);
                }
            }
        };
    }])
    .directive('hasAuthority', ['Principal', function (Principal) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var setVisible = function () {
                        element.removeClass('hidden');
                    },
                    setHidden = function () {
                        element.addClass('hidden');
                    },
                    defineVisibility = function (reset) {

                        if (reset) {
                            setVisible();
                        }

                        Principal.hasAuthority(authority)
                            .then(function (result) {
                                if (result) {
                                    setVisible();
                                } else {
                                    setHidden();
                                }
                            });
                    },
                    authority = attrs.hasAuthority.replace(/\s+/g, '');

                if (authority.length > 0) {
                    defineVisibility(true);
                }
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('Account', ["$resource", function Account($resource) {
        return $resource('api/account', {}, {
            'get': { method: 'GET', params: {}, isArray: false,
                interceptor: {
                    response: function(response) {
                        // expose response
                        return response;
                    }
                }
            }
        });
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('Activate', ["$resource", function ($resource) {
        return $resource('api/activate', {}, {
            'get': { method: 'GET', params: {}, isArray: false}
        });
    }]);



'use strict';

angular.module('devTalkApp')
    .factory('Password', ["$resource", function ($resource) {
        return $resource('api/account/change_password', {}, {
        });
    }]);

angular.module('devTalkApp')
    .factory('PasswordResetInit', ["$resource", function ($resource) {
        return $resource('api/account/reset_password/init', {}, {
        })
    }]);

angular.module('devTalkApp')
    .factory('PasswordResetFinish', ["$resource", function ($resource) {
        return $resource('api/account/reset_password/finish', {}, {
        })
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('Register', ["$resource", function ($resource) {
        return $resource('api/register', {}, {
        });
    }]);



/* globals $ */
'use strict';

angular.module('devTalkApp')
    .directive('showValidation', function() {
        return {
            restrict: 'A',
            require: 'form',
            link: function (scope, element) {
                element.find('.form-group').each(function() {
                    var $formGroup = $(this);
                    var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');

                    if ($inputs.length > 0) {
                        $inputs.each(function() {
                            var $input = $(this);
                            scope.$watch(function() {
                                return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');
                            }, function(isInvalid) {
                                $formGroup.toggleClass('has-error', isInvalid);
                            });
                        });
                    }
                });
            }
        };
    });

/* globals $ */
'use strict';

angular.module('devTalkApp')
    .directive('maxbytes', ["$q", function ($q) {
        function endsWith(suffix, str) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }

        function paddingSize(base64String) {
            if (endsWith('==', base64String)) {
                return 2;
            }
            if (endsWith('=', base64String)) {
                return 1;
            }
            return 0;
        }

        function numberOfBytes(base64String) {
            return base64String.length / 4 * 3 - paddingSize(base64String);
        }

        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, element, attrs, ngModel) {
                if (!ngModel) return;

                ngModel.$validators.maxbytes = function (modelValue) {
                    return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;
                };
            }
        };
    }]);

/* globals $ */
'use strict';

angular.module('devTalkApp')
    .directive('minbytes', ["$q", function ($q) {
        function endsWith(suffix, str) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }

        function paddingSize(base64String) {
            if (endsWith('==', base64String)) {
                return 2;
            }
            if (endsWith('=', base64String)) {
                return 1;
            }
            return 0;
        }

        function numberOfBytes(base64String) {
            return base64String.length / 4 * 3 - paddingSize(base64String);
        }

        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, element, attrs, ngModel) {
                if (!ngModel) return;

                ngModel.$validators.minbytes = function (modelValue) {
                    return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;
                };
            }
        };
    }]);

/* globals $ */
'use strict';

angular.module('devTalkApp')
    .directive('devTalkAppPager', function() {
        return {
            templateUrl: 'scripts/components/form/pager.html'
        };
    });

/* globals $ */
'use strict';

angular.module('devTalkApp')
    .directive('devTalkAppPagination', function() {
        return {
            templateUrl: 'scripts/components/form/pagination.html'
        };
    });

'use strict';

angular.module('devTalkApp')
    .factory('AuditsService', ["$http", function ($http) {
        return {
            findAll: function () {
                return $http.get('api/audits/').then(function (response) {
                    return response.data;
                });
            },
            findByDates: function (fromDate, toDate) {

                var formatDate =  function (dateToFormat) {
                    if (dateToFormat !== undefined && !angular.isString(dateToFormat)) {
                        return dateToFormat.getYear() + '-' + dateToFormat.getMonth() + '-' + dateToFormat.getDay();
                    }
                    return dateToFormat;
                };

                return $http.get('api/audits/', {params: {fromDate: formatDate(fromDate), toDate: formatDate(toDate)}}).then(function (response) {
                    return response.data;
                });
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('LogsService', ["$resource", function ($resource) {
        return $resource('api/logs', {}, {
            'findAll': { method: 'GET', isArray: true},
            'changeLevel': { method: 'PUT'}
        });
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('ConfigurationService', ["$rootScope", "$filter", "$http", function ($rootScope, $filter, $http) {
        return {
            get: function() {
                return $http.get('configprops').then(function (response) {
                    var properties = [];
                    angular.forEach(response.data, function (data) {
                        properties.push(data);
                    });
                    var orderBy = $filter('orderBy');
                    return orderBy(properties, 'prefix');
                });
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('MonitoringService', ["$rootScope", "$http", function ($rootScope, $http) {
        return {
            getMetrics: function () {
                return $http.get('metrics/metrics').then(function (response) {
                    return response.data;
                });
            },

            checkHealth: function () {
                return $http.get('health').then(function (response) {
                    return response.data;
                });
            },

            threadDump: function () {
                return $http.get('dump').then(function (response) {
                    return response.data;
                });
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('authInterceptor', ["$rootScope", "$q", "$location", "localStorageService", function ($rootScope, $q, $location, localStorageService) {
        return {
            // Add authorization token to headers
            request: function (config) {
                config.headers = config.headers || {};
                var token = localStorageService.get('token');
                
                if (token && token.expires && token.expires > new Date().getTime()) {
                  config.headers['x-auth-token'] = token.token;
                }
                
                return config;
            }
        };
    }])
    .factory('authExpiredInterceptor', ["$rootScope", "$q", "$injector", "localStorageService", function ($rootScope, $q, $injector, localStorageService) {
        return {
            responseError: function (response) {
                // token has expired
                if (response.status === 401 && (response.data.error == 'invalid_token' || response.data.error == 'Unauthorized')) {
                    localStorageService.remove('token');
                    var Principal = $injector.get('Principal');
                    if (Principal.isAuthenticated()) {
                        var Auth = $injector.get('Auth');
                        Auth.authorize(true);
                    }
                }
                return $q.reject(response);
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('errorHandlerInterceptor', ["$q", "$rootScope", function ($q, $rootScope) {
        return {
            'responseError': function (response) {
                if (!(response.status == 401 && response.data.path.indexOf("/api/account") == 0 )){
	                $rootScope.$emit('devTalkApp.httpError', response);
	            }
                return $q.reject(response);
            }
        };
    }]);
 'use strict';

angular.module('devTalkApp')
    .factory('notificationInterceptor', ["$q", "AlertService", function ($q, AlertService) {
        return {
            response: function(response) {
                var alertKey = response.headers('X-devTalkApp-alert');
                if (angular.isString(alertKey)) {
                    AlertService.success(alertKey, { param : response.headers('X-devTalkApp-params')});
                }
                return response;
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .directive('activeMenu', ["$translate", "$locale", "tmhDynamicLocale", function($translate, $locale, tmhDynamicLocale) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var language = attrs.activeMenu;

                scope.$watch(function() {
                    return $translate.use();
                }, function(selectedLanguage) {
                    if (language === selectedLanguage) {
                        tmhDynamicLocale.set(language);
                        element.addClass('active');
                    } else {
                        element.removeClass('active');
                    }
                });
            }
        };
    }])
    .directive('activeLink', ["location", function(location) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var clazz = attrs.activeLink;
                var path = attrs.href;
                path = path.substring(1); //hack because path does bot return including hashbang
                scope.location = location;
                scope.$watch('location.path()', function(newPath) {
                    if (path === newPath) {
                        element.addClass(clazz);
                    } else {
                        element.removeClass(clazz);
                    }
                });
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('NavbarController', ["$scope", "$location", "$state", "Auth", "Principal", "ENV", function ($scope, $location, $state, Auth, Principal, ENV) {
        $scope.isAuthenticated = Principal.isAuthenticated;
        $scope.$state = $state;
        $scope.inProduction = ENV === 'prod';

        $scope.logout = function () {
            Auth.logout();
            $state.go('home');
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .factory('User', ["$resource", function ($resource) {
        return $resource('api/users/:login', {}, {
                'query': {method: 'GET', isArray: true},
                'get': {
                    method: 'GET',
                    transformResponse: function (data) {
                        data = angular.fromJson(data);
                        return data;
                    }
                },
                'update': { method:'PUT' }
            });
        }]);

'use strict';

angular.module('devTalkApp')
    .filter('characters', function () {
        return function (input, chars, breakOnWord) {
            if (isNaN(chars)) {
                return input;
            }
            if (chars <= 0) {
                return '';
            }
            if (input && input.length > chars) {
                input = input.substring(0, chars);

                if (!breakOnWord) {
                    var lastspace = input.lastIndexOf(' ');
                    // Get last space
                    if (lastspace !== -1) {
                        input = input.substr(0, lastspace);
                    }
                } else {
                    while (input.charAt(input.length-1) === ' ') {
                        input = input.substr(0, input.length - 1);
                    }
                }
                return input + '...';
            }
            return input;
        };
    })
    .filter('words', function () {
        return function (input, words) {
            if (isNaN(words)) {
                return input;
            }
            if (words <= 0) {
                return '';
            }
            if (input) {
                var inputWords = input.split(/\s+/);
                if (inputWords.length > words) {
                    input = inputWords.slice(0, words).join(' ') + '...';
                }
            }
            return input;
        };
    });

/*jshint bitwise: false*/
'use strict';

angular.module('devTalkApp')
    .service('Base64', function () {
        var keyStr = 'ABCDEFGHIJKLMNOP' +
            'QRSTUVWXYZabcdef' +
            'ghijklmnopqrstuv' +
            'wxyz0123456789+/' +
            '=';
        this.encode = function (input) {
            var output = '',
                chr1, chr2, chr3 = '',
                enc1, enc2, enc3, enc4 = '',
                i = 0;

            while (i < input.length) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output +
                    keyStr.charAt(enc1) +
                    keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) +
                    keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = '';
                enc1 = enc2 = enc3 = enc4 = '';
            }

            return output;
        };

        this.decode = function (input) {
            var output = '',
                chr1, chr2, chr3 = '',
                enc1, enc2, enc3, enc4 = '',
                i = 0;

            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

            while (i < input.length) {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 !== 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 !== 64) {
                    output = output + String.fromCharCode(chr3);
                }

                chr1 = chr2 = chr3 = '';
                enc1 = enc2 = enc3 = enc4 = '';
            }
        };
    })
    .factory('StorageService', ["$window", function ($window) {
        return {

            get: function (key) {
                return JSON.parse($window.localStorage.getItem(key));
            },

            save: function (key, data) {
                $window.localStorage.setItem(key, JSON.stringify(data));
            },

            remove: function (key) {
                $window.localStorage.removeItem(key);
            },

            clearAll : function () {
                $window.localStorage.clear();
            }
        };
    }]);


'use strict';

angular.module('devTalkApp')
    .factory('AlertService', ["$timeout", "$sce", "$translate", function ($timeout, $sce,$translate) {
        var exports = {
            factory: factory,
            add: addAlert,
            closeAlert: closeAlert,
            closeAlertByIndex: closeAlertByIndex,
            clear: clear,
            get: get,
            success: success,
            error: error,
            info: info,
            warning : warning
        },
        alertId = 0, // unique id for each alert. Starts from 0.
        alerts = [],
        timeout = 5000; // default timeout

        function clear() {
            alerts = [];
        }

        function get() {
            return alerts;
        }

        function success(msg, params) {
            this.add({
                type: "success",
                msg: msg,
                params: params,
                timeout: timeout
            });
        }

        function error(msg, params) {
            this.add({
                type: "danger",
                msg: msg,
                params: params,
                timeout: timeout
            });
        }

        function warning(msg, params) {
            this.add({
                type: "warning",
                msg: msg,
                params: params,
                timeout: timeout
            });
        }

        function info(msg, params) {
            this.add({
                type: "info",
                msg: msg,
                params: params,
                timeout: timeout
            });
        }

        function factory(alertOptions) {
            return alerts.push({
                type: alertOptions.type,
                msg: $sce.trustAsHtml(alertOptions.msg),
                id: alertOptions.alertId,
                timeout: alertOptions.timeout,
                close: function () {
                    return exports.closeAlert(this.id);
                }
            });
        }

        function addAlert(alertOptions) {
            alertOptions.alertId = alertId++;
            alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);
            var that = this;
            this.factory(alertOptions);
            if (alertOptions.timeout && alertOptions.timeout > 0) {
                $timeout(function () {
                    that.closeAlert(alertOptions.alertId);
                }, alertOptions.timeout);
            }
        }

        function closeAlert(id) {
            return this.closeAlertByIndex(alerts.map(function(e) { return e.id; }).indexOf(id));
        }

        function closeAlertByIndex(index) {
            return alerts.splice(index, 1);
        }

        return exports;

    }]);
'use strict';

angular.module('devTalkApp')
    .directive('jhAlert', ["AlertService", function(AlertService) {
		return {
            restrict: 'E',
            template: '<div class="alerts" ng-cloak="">' +
			                '<alert ng-cloak="" ng-repeat="alert in alerts" type="{{alert.type}}" close="alert.close()"><pre>{{ alert.msg }}</pre></alert>' +
			            '</div>',
			controller: ['$scope', 
	            function($scope) {
	                $scope.alerts = AlertService.get();
	                $scope.$on('$destroy', function () {
						$scope.alerts = [];
					});
	            }
	        ]
        }
    }])
    .directive('jhAlertError', ["AlertService", "$rootScope", "$translate", function(AlertService, $rootScope, $translate) {
		return {
            restrict: 'E',
            template: '<div class="alerts" ng-cloak="">' +
			                '<alert ng-cloak="" ng-repeat="alert in alerts" type="{{alert.type}}" close="alert.close()"><pre>{{ alert.msg }}</pre></alert>' +
			            '</div>',
			controller: ['$scope', 
	            function($scope) {
	                $scope.alerts = AlertService.get();

					var cleanHttpErrorListener = $rootScope.$on('devTalkApp.httpError', function (event, httpResponse) {
					    var i;
					    event.stopPropagation();
					    switch (httpResponse.status) {
					        // connection refused, server not reachable
					        case 0:
					            addErrorAlert("Server not reachable",'error.serverNotReachable');
					            break;

					        case 400:
					            if (httpResponse.data && httpResponse.data.fieldErrors) {
					                for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {
					                    var fieldError = httpResponse.data.fieldErrors[i];
					                    // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it
					                    var convertedField = fieldError.field.replace(/\[\d*\]/g, "[]");
					                    var fieldName = $translate.instant('devTalkApp.' + fieldError.objectName + '.' + convertedField);
					                    addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});
					                }
					            } else if (httpResponse.data && httpResponse.data.message) {
					              addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);
					            } else {
					              addErrorAlert(httpResponse.data);
					            }
					            break;

					        default:
					            if (httpResponse.data && httpResponse.data.message) {
					                addErrorAlert(httpResponse.data.message);
					            } else {
					                addErrorAlert(JSON.stringify(httpResponse));
					            }
					    }
					});

					$scope.$on('$destroy', function () {
					    if(cleanHttpErrorListener !== undefined && cleanHttpErrorListener !== null){
							cleanHttpErrorListener();
						}
					});

					var addErrorAlert = function (message, key, data) {
						
						key = key && key != null ? key : message;
						AlertService.error(key, data); 
						
					}

	            }
	        ]
        }
    }]);
'use strict';

angular.module('devTalkApp')
    .service('ParseLinks', function () {
        this.parse = function (header) {
            if (header.length == 0) {
                throw new Error("input must not be of zero length");
            }

            // Split parts by comma
            var parts = header.split(',');
            var links = {};
            // Parse each part into a named link
            angular.forEach(parts, function (p) {
                var section = p.split(';');
                if (section.length != 2) {
                    throw new Error("section could not be split on ';'");
                }
                var url = section[0].replace(/<(.*)>/, '$1').trim();
                var queryString = {};
                url.replace(
                    new RegExp("([^?=&]+)(=([^&]*))?", "g"),
                    function($0, $1, $2, $3) { queryString[$1] = $3; }
                );
                var page = queryString['page'];
                if( angular.isString(page) ) {
                    page = parseInt(page);
                }
                var name = section[1].replace(/rel="(.*)"/, '$1').trim();
                links[name] = page;
            });

            return links;
        }
    });

'use strict';

angular.module('devTalkApp')
    .service('DateUtils', function () {
      this.convertLocaleDateToServer = function(date) {
        if (date) {
          var utcDate = new Date();
          utcDate.setUTCDate(date.getDate());
          utcDate.setUTCMonth(date.getMonth());
          utcDate.setUTCFullYear(date.getFullYear());
          return utcDate;
        } else {
          return null;
        }
      };
      this.convertLocaleDateFromServer = function(date) {
        if (date) {
          var dateString = date.split("-");
          return new Date(dateString[0], dateString[1] - 1, dateString[2]);
        }
        return null;
      };
      this.convertDateTimeFromServer = function(date) {
        if (date) {
          return new Date(date);   
        } else {
          return null;
        }
      }
    });

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('account', {
                abstract: true,
                parent: 'site'
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('activate', {
                parent: 'account',
                url: '/activate?key',
                data: {
                    authorities: [],
                    pageTitle: 'activate.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/account/activate/activate.html',
                        controller: 'ActivationController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('activate');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('ActivationController', ["$scope", "$stateParams", "Auth", function ($scope, $stateParams, Auth) {
        Auth.activateAccount({key: $stateParams.key}).then(function () {
            $scope.error = null;
            $scope.success = 'OK';
        }).catch(function () {
            $scope.success = null;
            $scope.error = 'ERROR';
        });
    }]);


'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('login', {
                parent: 'account',
                url: '/login',
                data: {
                    authorities: [], 
                    pageTitle: 'login.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/account/login/login.html',
                        controller: 'LoginController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('login');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('LoginController', ["$rootScope", "$scope", "$state", "$timeout", "Auth", function ($rootScope, $scope, $state, $timeout, Auth) {
        $scope.user = {};
        $scope.errors = {};

        $scope.rememberMe = true;
        $timeout(function (){angular.element('[ng-model="username"]').focus();});
        $scope.login = function (event) {
            event.preventDefault();
            Auth.login({
                username: $scope.username,
                password: $scope.password,
                rememberMe: $scope.rememberMe
            }).then(function () {
                $scope.authenticationError = false;
                if ($rootScope.previousStateName === 'register') {
                    $state.go('home');
                } else {
                    $rootScope.back();
                }
            }).catch(function () {
                $scope.authenticationError = true;
            });
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('password', {
                parent: 'account',
                url: '/password',
                data: {
                    authorities: ['ROLE_USER'],
                    pageTitle: 'global.menu.account.password'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/account/password/password.html',
                        controller: 'PasswordController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('password');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('PasswordController', ["$scope", "Auth", "Principal", function ($scope, Auth, Principal) {
        Principal.identity().then(function(account) {
            $scope.account = account;
        });

        $scope.success = null;
        $scope.error = null;
        $scope.doNotMatch = null;
        $scope.changePassword = function () {
            if ($scope.password !== $scope.confirmPassword) {
                $scope.doNotMatch = 'ERROR';
            } else {
                $scope.doNotMatch = null;
                Auth.changePassword($scope.password).then(function () {
                    $scope.error = null;
                    $scope.success = 'OK';
                }).catch(function () {
                    $scope.success = null;
                    $scope.error = 'ERROR';
                });
            }
        };
    }]);

/* globals $ */
'use strict';

angular.module('devTalkApp')
    .directive('passwordStrengthBar', function () {
        return {
            replace: true,
            restrict: 'E',
            template: '<div id="strength">' +
                '<small translate="global.messages.validate.newpassword.strength">Password strength:</small>' +
                '<ul id="strengthBar">' +
                '<li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li>' +
                '</ul>' +
                '</div>',
            link: function (scope, iElement, attr) {
                var strength = {
                    colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],
                    mesureStrength: function (p) {

                        var _force = 0;
                        var _regex = /[$-/:-?{-~!"^_`\[\]]/g; // "

                        var _lowerLetters = /[a-z]+/.test(p);
                        var _upperLetters = /[A-Z]+/.test(p);
                        var _numbers = /[0-9]+/.test(p);
                        var _symbols = _regex.test(p);

                        var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];
                        var _passedMatches = $.grep(_flags, function (el) {
                            return el === true;
                        }).length;

                        _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);
                        _force += _passedMatches * 10;

                        // penality (short password)
                        _force = (p.length <= 6) ? Math.min(_force, 10) : _force;

                        // penality (poor variety of characters)
                        _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;
                        _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;
                        _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;

                        return _force;

                    },
                    getColor: function (s) {

                        var idx = 0;
                        if (s <= 10) {
                            idx = 0;
                        }
                        else if (s <= 20) {
                            idx = 1;
                        }
                        else if (s <= 30) {
                            idx = 2;
                        }
                        else if (s <= 40) {
                            idx = 3;
                        }
                        else {
                            idx = 4;
                        }

                        return { idx: idx + 1, col: this.colors[idx] };
                    }
                };
                scope.$watch(attr.passwordToCheck, function (password) {
                    if (password) {
                        var c = strength.getColor(strength.mesureStrength(password));
                        iElement.removeClass('ng-hide');
                        iElement.find('ul').children('li')
                            .css({ 'background': '#DDD' })
                            .slice(0, c.idx)
                            .css({ 'background': c.col });
                    }
                });
            }
        };
    });

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('register', {
                parent: 'account',
                url: '/register',
                data: {
                    authorities: [],
                    pageTitle: 'register.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/account/register/register.html',
                        controller: 'RegisterController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('register');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('RegisterController', ["$scope", "$translate", "$timeout", "Auth", function ($scope, $translate, $timeout, Auth) {
        $scope.success = null;
        $scope.error = null;
        $scope.doNotMatch = null;
        $scope.errorUserExists = null;
        $scope.registerAccount = {};
        $timeout(function (){angular.element('[ng-model="registerAccount.login"]').focus();});

        $scope.register = function () {
            if ($scope.registerAccount.password !== $scope.confirmPassword) {
                $scope.doNotMatch = 'ERROR';
            } else {
                $scope.registerAccount.langKey = $translate.use();
                $scope.doNotMatch = null;
                $scope.error = null;
                $scope.errorUserExists = null;
                $scope.errorEmailExists = null;

                Auth.createAccount($scope.registerAccount).then(function () {
                    $scope.success = 'OK';
                }).catch(function (response) {
                    $scope.success = null;
                    if (response.status === 400 && response.data === 'login already in use') {
                        $scope.errorUserExists = 'ERROR';
                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {
                        $scope.errorEmailExists = 'ERROR';
                    } else {
                        $scope.error = 'ERROR';
                    }
                });
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('settings', {
                parent: 'account',
                url: '/settings',
                data: {
                    authorities: ['ROLE_USER'],
                    pageTitle: 'global.menu.account.settings'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/account/settings/settings.html',
                        controller: 'SettingsController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('settings');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('SettingsController', ["$scope", "Principal", "Auth", "Language", "$translate", function ($scope, Principal, Auth, Language, $translate) {
        $scope.success = null;
        $scope.error = null;
        Principal.identity(true).then(function(account) {
            $scope.settingsAccount = account;
        });

        $scope.save = function () {
            Auth.updateAccount($scope.settingsAccount).then(function() {
                $scope.error = null;
                $scope.success = 'OK';
                Principal.identity().then(function(account) {
                    $scope.settingsAccount = account;
                });
                Language.getCurrent().then(function(current) {
                    if ($scope.settingsAccount.langKey !== current) {
                        $translate.use($scope.settingsAccount.langKey);
                    }
                });
            }).catch(function() {
                $scope.success = null;
                $scope.error = 'ERROR';
            });
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('ResetFinishController', ["$scope", "$stateParams", "$timeout", "Auth", function ($scope, $stateParams, $timeout, Auth) {

        $scope.keyMissing = $stateParams.key === undefined;
        $scope.doNotMatch = null;

        $scope.resetAccount = {};
        $timeout(function (){angular.element('[ng-model="resetAccount.password"]').focus();});

        $scope.finishReset = function() {
            if ($scope.resetAccount.password !== $scope.confirmPassword) {
                $scope.doNotMatch = 'ERROR';
            } else {
                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: $scope.resetAccount.password}).then(function () {
                    $scope.success = 'OK';
                }).catch(function (response) {
                    $scope.success = null;
                    $scope.error = 'ERROR';

                });
            }

        };
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('finishReset', {
                parent: 'account',
                url: '/reset/finish?key',
                data: {
                    authorities: []
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/account/reset/finish/reset.finish.html',
                        controller: 'ResetFinishController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('reset');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('RequestResetController', ["$rootScope", "$scope", "$state", "$timeout", "Auth", function ($rootScope, $scope, $state, $timeout, Auth) {

        $scope.success = null;
        $scope.error = null;
        $scope.errorEmailNotExists = null;
        $scope.resetAccount = {};
        $timeout(function (){angular.element('[ng-model="resetAccount.email"]').focus();});

        $scope.requestReset = function () {

            $scope.error = null;
            $scope.errorEmailNotExists = null;

            Auth.resetPasswordInit($scope.resetAccount.email).then(function () {
                $scope.success = 'OK';
            }).catch(function (response) {
                $scope.success = null;
                if (response.status === 400 && response.data === 'e-mail address not registered') {
                    $scope.errorEmailNotExists = 'ERROR';
                } else {
                    $scope.error = 'ERROR';
                }
            });
        }

    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('requestReset', {
                parent: 'account',
                url: '/reset/request',
                data: {
                    authorities: []
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/account/reset/request/reset.request.html',
                        controller: 'RequestResetController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('reset');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('admin', {
                abstract: true,
                parent: 'site'
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('audits', {
                parent: 'admin',
                url: '/audits',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'audits.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/admin/audits/audits.html',
                        controller: 'AuditsController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('audits');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('AuditsController', ["$scope", "$filter", "AuditsService", function ($scope, $filter, AuditsService) {
        $scope.onChangeDate = function () {
            var dateFormat = 'yyyy-MM-dd';
            var fromDate = $filter('date')($scope.fromDate, dateFormat);
            var toDate = $filter('date')($scope.toDate, dateFormat);

            AuditsService.findByDates(fromDate, toDate).then(function (data) {
                $scope.audits = data;
            });
        };

        // Date picker configuration
        $scope.today = function () {
            // Today + 1 day - needed if the current day must be included
            var today = new Date();
            $scope.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
        };

        $scope.previousMonth = function () {
            var fromDate = new Date();
            if (fromDate.getMonth() === 0) {
                fromDate = new Date(fromDate.getFullYear() - 1, 0, fromDate.getDate());
            } else {
                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());
            }

            $scope.fromDate = fromDate;
        };

        $scope.today();
        $scope.previousMonth();
        $scope.onChangeDate();
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('configuration', {
                parent: 'admin',
                url: '/configuration',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'configuration.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/admin/configuration/configuration.html',
                        controller: 'ConfigurationController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('configuration');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('ConfigurationController', ["$scope", "ConfigurationService", function ($scope, ConfigurationService) {
        ConfigurationService.get().then(function(configuration) {
            $scope.configuration = configuration;
        });
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('docs', {
                parent: 'admin',
                url: '/docs',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'global.menu.admin.apidocs'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/admin/docs/docs.html'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', function ($translate) {
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('health', {
                parent: 'admin',
                url: '/health',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'health.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/admin/health/health.html',
                        controller: 'HealthController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('health');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('HealthController', ["$scope", "MonitoringService", "$modal", function ($scope, MonitoringService, $modal) {
        $scope.updatingHealth = true;
        $scope.separator = '.';

        $scope.refresh = function () {
            $scope.updatingHealth = true;
            MonitoringService.checkHealth().then(function (response) {
                $scope.healthData = $scope.transformHealthData(response);
                $scope.updatingHealth = false;
            }, function (response) {
                $scope.healthData =  $scope.transformHealthData(response.data);
                $scope.updatingHealth = false;
            });
        };

        $scope.refresh();

        $scope.getLabelClass = function (statusState) {
            if (statusState === 'UP') {
                return 'label-success';
            } else {
                return 'label-danger';
            }
        };

        $scope.transformHealthData = function (data) {
            var response = [];
            $scope.flattenHealthData(response, null, data);
            return response;
        };

        $scope.flattenHealthData = function (result, path, data) {
            angular.forEach(data, function (value, key) {
                if ($scope.isHealthObject(value)) {
                    if ($scope.hasSubSystem(value)) {
                        $scope.addHealthObject(result, false, value, $scope.getModuleName(path, key));
                        $scope.flattenHealthData(result, $scope.getModuleName(path, key), value);
                    } else {
                        $scope.addHealthObject(result, true, value, $scope.getModuleName(path, key));
                    }
                }
            });
            return result;
        };

        $scope.getModuleName = function (path, name) {
            var result;
            if (path && name) {
                result = path + $scope.separator + name;
            }  else if (path) {
                result = path;
            } else if (name) {
                result = name;
            } else {
                result = '';
            }
            return result;
        };


        $scope.showHealth = function(health) {
            var modalInstance = $modal.open({
                templateUrl: 'scripts/app/admin/health/health.modal.html',
                controller: 'HealthModalController',
                size: 'lg',
                resolve: {
                    currentHealth: function() {
                        return health;
                    },
                    baseName: function() {
                        return $scope.baseName;
                    },
                    subSystemName: function() {
                        return $scope.subSystemName;
                    }

                }
            });
        };

        $scope.addHealthObject = function (result, isLeaf, healthObject, name) {

            var healthData = {
                'name': name
            };
            var details = {};
            var hasDetails = false;

            angular.forEach(healthObject, function (value, key) {
                if (key === 'status' || key === 'error') {
                    healthData[key] = value;
                } else {
                    if (!$scope.isHealthObject(value)) {
                        details[key] = value;
                        hasDetails = true;
                    }
                }
            });

            // Add the of the details
            if (hasDetails) {
                angular.extend(healthData, { 'details': details});
            }

            // Only add nodes if they provide additional information
            if (isLeaf || hasDetails || healthData.error) {
                result.push(healthData);
            }
            return healthData;
        };

        $scope.hasSubSystem = function (healthObject) {
            var result = false;
            angular.forEach(healthObject, function (value) {
                if (value && value.status) {
                    result = true;
                }
            });
            return result;
        };

        $scope.isHealthObject = function (healthObject) {
            var result = false;
            angular.forEach(healthObject, function (value, key) {
                if (key === 'status') {
                    result = true;
                }
            });
            return result;
        };

        $scope.baseName = function (name) {
            if (name) {
              var split = name.split('.');
              return split[0];
            }
        };

        $scope.subSystemName = function (name) {
            if (name) {
              var split = name.split('.');
              split.splice(0, 1);
              var remainder = split.join('.');
              return remainder ? ' - ' + remainder : '';
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('HealthModalController', ["$scope", "$modalInstance", "currentHealth", "baseName", "subSystemName", function($scope, $modalInstance, currentHealth, baseName, subSystemName) {

        $scope.currentHealth = currentHealth;
        $scope.baseName = baseName, $scope.subSystemName = subSystemName;

        $scope.cancel = function() {
            $modalInstance.dismiss('cancel');
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('logs', {
                parent: 'admin',
                url: '/logs',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'logs.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/admin/logs/logs.html',
                        controller: 'LogsController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('logs');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('LogsController', ["$scope", "LogsService", function ($scope, LogsService) {
        $scope.loggers = LogsService.findAll();

        $scope.changeLevel = function (name, level) {
            LogsService.changeLevel({name: name, level: level}, function () {
                $scope.loggers = LogsService.findAll();
            });
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('metrics', {
                parent: 'admin',
                url: '/metrics',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'metrics.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/admin/metrics/metrics.html',
                        controller: 'MetricsController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('metrics');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('MetricsController', ["$scope", "MonitoringService", "$modal", function ($scope, MonitoringService, $modal) {
        $scope.metrics = {};
        $scope.updatingMetrics = true;

        $scope.refresh = function () {
            $scope.updatingMetrics = true;
            MonitoringService.getMetrics().then(function (promise) {
                $scope.metrics = promise;
                $scope.updatingMetrics = false;
            }, function (promise) {
                $scope.metrics = promise.data;
                $scope.updatingMetrics = false;
            });
        };

        $scope.$watch('metrics', function (newValue) {
            $scope.servicesStats = {};
            $scope.cachesStats = {};
            angular.forEach(newValue.timers, function (value, key) {
                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {
                    $scope.servicesStats[key] = value;
                }

                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {
                    // remove gets or puts
                    var index = key.lastIndexOf('.');
                    var newKey = key.substr(0, index);

                    // Keep the name of the domain
                    index = newKey.lastIndexOf('.');
                    $scope.cachesStats[newKey] = {
                        'name': newKey.substr(index + 1),
                        'value': value
                    };
                }
            });
        });

        $scope.refresh();

        $scope.refreshThreadDumpData = function() {
            MonitoringService.threadDump().then(function(data) {

                var modalInstance = $modal.open({
                    templateUrl: 'scripts/app/admin/metrics/metrics.modal.html',
                    controller: 'MetricsModalController',
                    size: 'lg',
                    resolve: {
                        threadDump: function() {
                            return data;
                        }

                    }
                });
            });
        };


    }]);

'use strict';

angular.module('devTalkApp')
    .controller('MetricsModalController', ["$scope", "$modalInstance", "threadDump", function($scope, $modalInstance, threadDump) {

        $scope.threadDump = threadDump;
        $scope.threadDumpRunnable = 0;
        $scope.threadDumpWaiting = 0;
        $scope.threadDumpTimedWaiting = 0;
        $scope.threadDumpBlocked = 0;

        angular.forEach(threadDump, function(value) {
            if (value.threadState === 'RUNNABLE') {
                $scope.threadDumpRunnable += 1;
            } else if (value.threadState === 'WAITING') {
                $scope.threadDumpWaiting += 1;
            } else if (value.threadState === 'TIMED_WAITING') {
                $scope.threadDumpTimedWaiting += 1;
            } else if (value.threadState === 'BLOCKED') {
                $scope.threadDumpBlocked += 1;
            }
        });

        $scope.threadDumpAll = $scope.threadDumpRunnable + $scope.threadDumpWaiting +
            $scope.threadDumpTimedWaiting + $scope.threadDumpBlocked;

        $scope.cancel = function() {
            $modalInstance.dismiss('cancel');
        };

        $scope.getLabelClass = function (threadState) {
            if (threadState === 'RUNNABLE') {
                return 'label-success';
            } else if (threadState === 'WAITING') {
                return 'label-info';
            } else if (threadState === 'TIMED_WAITING') {
                return 'label-warning';
            } else if (threadState === 'BLOCKED') {
                return 'label-danger';
            }
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('UserManagementDetailController', ["$scope", "$stateParams", "User", function ($scope, $stateParams, User) {
        $scope.user = {};
        $scope.load = function (login) {
            User.get({login: login}, function(result) {
                $scope.user = result;
            });
        };
        $scope.load($stateParams.login);
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('UserManagementController', ["$scope", "User", "ParseLinks", "Language", function ($scope, User, ParseLinks, Language) {
        $scope.users = [];
        $scope.authorities = ["ROLE_USER", "ROLE_ADMIN"];
        Language.getAll().then(function (languages) {
            $scope.languages = languages;
        });

        $scope.page = 0;
        $scope.loadAll = function () {
            User.query({page: $scope.page, per_page: 20}, function (result, headers) {
                $scope.links = ParseLinks.parse(headers('link'));
                $scope.users = result;
            });
        };

        $scope.loadPage = function (page) {
            $scope.page = page;
            $scope.loadAll();
        };
        $scope.loadAll();

        $scope.setActive = function (user, isActivated) {
            user.activated = isActivated;
            User.update(user, function () {
                $scope.loadAll();
                $scope.clear();
            });
        };

        $scope.showUpdate = function (login) {
            User.get({login: login}, function (result) {
                $scope.user = result;
                $('#saveUserModal').modal('show');
            });
        };

        $scope.save = function () {
            User.update($scope.user,
                function () {
                    $scope.refresh();
                });
        };

        $scope.refresh = function () {
            $scope.loadAll();
            $('#saveUserModal').modal('hide');
            $scope.clear();
        };

        $scope.clear = function () {
            $scope.user = {
                id: null, login: null, firstName: null, lastName: null, email: null,
                activated: null, langKey: null, createdBy: null, createdDate: null,
                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,
                resetKey: null, authorities: null
            };
            $scope.editForm.$setPristine();
            $scope.editForm.$setUntouched();
        };
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('user-management', {
                parent: 'admin',
                url: '/user-management',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'user-management.home.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/admin/user-management/user-management.html',
                        controller: 'UserManagementController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('user.management');
                        return $translate.refresh();
                    }]
                }
            })
            .state('user-management-detail', {
                parent: 'admin',
                url: '/user-management/:login',
                data: {
                    authorities: ['ROLE_ADMIN'],
                    pageTitle: 'user-management.detail.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/admin/user-management/user-management-detail.html',
                        controller: 'UserManagementDetailController'
                    }
                },
                resolve: {
                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {
                        $translatePartialLoader.addPart('user.management');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('entity', {
                abstract: true,
                parent: 'site'
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('error', {
                parent: 'site',
                url: '/error',
                data: {
                    authorities: [],
                    pageTitle: 'error.title'
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/error/error.html'
                    }
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {
                        $translatePartialLoader.addPart('error');
                        return $translate.refresh();
                    }]
                }
            })
            .state('accessdenied', {
                parent: 'site',
                url: '/accessdenied',
                data: {
                    authorities: []
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/error/accessdenied.html'
                    }
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {
                        $translatePartialLoader.addPart('error');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('home', {
                parent: 'site',
                url: '/',
                data: {
                    authorities: []
                },
                views: {
                    'content@': {
                        templateUrl: 'scripts/app/main/main.html',
                        controller: 'MainController'
                    }
                },
                resolve: {
                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {
                        $translatePartialLoader.addPart('main');
                        return $translate.refresh();
                    }]
                }
            });
    }]);

'use strict';

angular.module('devTalkApp')
    .controller('MainController', ["$scope", "Principal", function ($scope, Principal) {
        Principal.identity().then(function(account) {
            $scope.account = account;
            $scope.isAuthenticated = Principal.isAuthenticated;
        });
    }]);

MessageFormat.locale.en=function(n){return n===1?"one":"other"}

MessageFormat.locale.fr=function(n){return n===0||n==1?"one":"other"}

'use strict';

angular.module('devTalkApp')
    .factory('Language', ["$q", "$http", "$translate", "LANGUAGES", function ($q, $http, $translate, LANGUAGES) {
        return {
            getCurrent: function () {
                var deferred = $q.defer();
                var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');

                if (angular.isUndefined(language)) {
                    language = 'en';
                }

                deferred.resolve(language);
                return deferred.promise;
            },
            getAll: function () {
                var deferred = $q.defer();
                deferred.resolve(LANGUAGES);
                return deferred.promise;
            }
        };
    }])

/*
 Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
 They are written in English to avoid character encoding issues (not a perfect solution)
 */
    .constant('LANGUAGES', [
        'en', 'fr'
        //JHipster will add new languages here
    ]
);





'use strict';

angular.module('devTalkApp')
    .controller('LanguageController', ["$scope", "$translate", "Language", "tmhDynamicLocale", function ($scope, $translate, Language, tmhDynamicLocale) {
        $scope.changeLanguage = function (languageKey) {
            $translate.use(languageKey);
            tmhDynamicLocale.set(languageKey);
        };

        Language.getAll().then(function (languages) {
            $scope.languages = languages;
        });
    }])
    .filter('findLanguageFromKey', function () {
        return function (lang) {
            return {
                "ca": "Català",
                "da": "Dansk",
                "de": "Deutsch",
                "en": "English",
                "es": "Español",
                "fr": "Français",
                "hu": "Magyar",
                "it": "Italiano",
                "ja": "日本語",
                "ko": "한국어",
                "nl": "Nederlands",
                "pl": "Polski",
                "pt-br": "Português (Brasil)",
                "pt-pt": "Português",
                "ro": "Română",
                "ru": "Русский",
                "sv": "Svenska",
                "tr": "Türkçe",
                "zh-cn": "中文（简体）",
                "zh-tw": "繁體中文"
            }[lang];
        }
    });

'use strict';

angular.module('devTalkApp')
    .factory('AuthServerProvider', ["$http", "localStorageService", "Base64", function loginService($http, localStorageService, Base64) {
        return {
            login: function(credentials) {
                var data = "username=" +  encodeURIComponent(credentials.username) + "&password="
                    + encodeURIComponent(credentials.password);
                return $http.post('api/authenticate', data, {
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                        "Accept": "application/json"
                    }
                }).success(function (response) {
                    localStorageService.set('token', response);
                    return response;
                });
            },
            logout: function() {
                //Stateless API : No server logout
                localStorageService.clearAll();
            },
            getToken: function () {
                return localStorageService.get('token');
            },
            hasValidToken: function () {
                var token = this.getToken();
                return token && token.expires && token.expires > new Date().getTime();
            }
        };
    }]);

angular.module('devTalkApp').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('scripts/app/account/activate/activate.html',
    "<div> <div class=row> <div class=\"col-md-8 col-md-offset-2\"> <h1 translate=activate.title>Activation</h1> <div class=\"alert alert-success\" ng-show=success translate=activate.messages.success> <strong>Your user has been activated.</strong> Please <a class=alert-link href=#/login>sign in</a>. </div> <div class=\"alert alert-danger\" ng-show=error translate=activate.messages.error> <strong>Your user could not be activated.</strong> Please use the registration form to sign up. </div> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/account/login/login.html',
    "<div> <div class=row> <div class=\"col-md-4 col-md-offset-4\"> <h1 translate=login.title>Sign in</h1> <div class=\"alert alert-danger\" ng-show=authenticationError translate=login.messages.error.authentication> <strong>Failed to sign in!</strong> Please check your credentials and try again. </div> <form class=form role=form ng-submit=login($event)> <div class=form-group> <label for=username translate=global.form.username>Login</label> <input class=form-control id=username placeholder=\"{{'global.form.username.placeholder' | translate}}\" ng-model=username> </div> <div class=form-group> <label for=password translate=login.form.password>Password</label> <input type=password class=form-control id=password placeholder=\"{{'login.form.password.placeholder' | translate}}\" ng-model=password> </div> <button type=submit class=\"btn btn-primary\" translate=login.form.button>Sign in</button> </form> <p></p> <div class=\"alert alert-warning\"> <a class=alert-link href=#/reset/request translate=login.password.forgot>Did you forget your password?</a> </div> <div class=\"alert alert-warning\" translate=global.messages.info.register> You don't have an account yet? <a class=alert-link href=#/register>Register a new account</a> </div> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/account/password/password.html',
    "<div> <div class=row> <div class=\"col-md-8 col-md-offset-2\"> <h2 translate=password.title translate-values=\"{username: '{{account.login}}'}\">Password for [<b>{{account.login}}</b>]</h2> <div class=\"alert alert-success\" ng-show=success translate=password.messages.success> <strong>Password changed!</strong> </div> <div class=\"alert alert-danger\" ng-show=error translate=password.messages.error> <strong>An error has occurred!</strong> The password could not be changed. </div> <div class=\"alert alert-danger\" ng-show=doNotMatch translate=global.messages.error.dontmatch> The password and its confirmation do not match! </div> <form name=form role=form novalidate ng-submit=changePassword() show-validation> <div class=form-group> <label for=password translate=global.form.newpassword>New password</label> <input type=password class=form-control id=password name=password placeholder=\"{{'global.form.newpassword.placeholder' | translate}}\" ng-model=password ng-minlength=5 ng-maxlength=50 required> <div ng-show=\"form.password.$dirty && form.password.$invalid\"> <p class=help-block ng-show=form.password.$error.required translate=global.messages.validate.newpassword.required> Your password is required. </p> <p class=help-block ng-show=form.password.$error.minlength translate=global.messages.validate.newpassword.minlength> Your password is required to be at least 5 characters. </p> <p class=help-block ng-show=form.password.$error.maxlength translate=global.messages.validate.newpassword.maxlength> Your password cannot be longer than 50 characters. </p> </div> <password-strength-bar password-to-check=password></password-strength-bar> </div> <div class=form-group> <label for=confirmPassword translate=global.form.confirmpassword>New password confirmation</label> <input type=password class=form-control id=confirmPassword name=confirmPassword placeholder=\"{{'global.form.confirmpassword.placeholder' | translate}}\" ng-model=confirmPassword ng-minlength=5 ng-maxlength=50 required> <div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"> <p class=help-block ng-show=form.confirmPassword.$error.required translate=global.messages.validate.confirmpassword.required> Your confirmation password is required. </p> <p class=help-block ng-show=form.confirmPassword.$error.minlength translate=global.messages.validate.confirmpassword.minlength> Your confirmation password is required to be at least 5 characters. </p> <p class=help-block ng-show=form.confirmPassword.$error.maxlength translate=global.messages.validate.confirmpassword.maxlength> Your confirmation password cannot be longer than 50 characters. </p> </div> </div> <button type=submit ng-disabled=form.$invalid class=\"btn btn-primary\" translate=password.form.button>Save</button> </form> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/account/register/register.html',
    "<div> <div class=row> <div class=\"col-md-8 col-md-offset-2\"> <h1 translate=register.title>Registration</h1> <div class=\"alert alert-success\" ng-show=success translate=register.messages.success> <strong>Registration saved!</strong> Please check your email for confirmation. </div> <div class=\"alert alert-danger\" ng-show=error translate=register.messages.error.fail> <strong>Registration failed!</strong> Please try again later. </div> <div class=\"alert alert-danger\" ng-show=errorUserExists translate=register.messages.error.userexists> <strong>Login name already registered!</strong> Please choose another one. </div> <div class=\"alert alert-danger\" ng-show=errorEmailExists translate=register.messages.error.emailexists> <strong>E-mail is already in use!</strong> Please choose another one. </div> <div class=\"alert alert-danger\" ng-show=doNotMatch translate=global.messages.error.dontmatch> The password and its confirmation do not match! </div> <form ng-show=!success name=form role=form novalidate ng-submit=register() show-validation> <div class=form-group> <label for=login translate=global.form.username>Username</label> <input class=form-control id=login name=login placeholder=\"{{'global.form.username.placeholder' | translate}}\" ng-model=registerAccount.login ng-minlength=1 ng-maxlength=50 ng-pattern=\"/^[a-z0-9]*$/\" required> <div ng-show=\"form.login.$dirty && form.login.$invalid\"> <p class=help-block ng-show=form.login.$error.required translate=register.messages.validate.login.required> Your username is required. </p> <p class=help-block ng-show=form.login.$error.minlength translate=register.messages.validate.login.minlength> Your username is required to be at least 1 character. </p> <p class=help-block ng-show=form.login.$error.maxlength translate=register.messages.validate.login.maxlength> Your username cannot be longer than 50 characters. </p> <p class=help-block ng-show=form.login.$error.pattern translate=register.messages.validate.login.pattern> Your username can only contain lower-case letters and digits. </p> </div> </div> <div class=form-group> <label for=email translate=global.form.email>E-mail</label> <input type=email class=form-control id=email name=email placeholder=\"{{'global.form.email.placeholder' | translate}}\" ng-model=registerAccount.email ng-minlength=5 ng-maxlength=100 required> <div ng-show=\"form.email.$dirty && form.email.$invalid\"> <p class=help-block ng-show=form.email.$error.required translate=global.messages.validate.email.required> Your e-mail is required. </p> <p class=help-block ng-show=form.email.$error.email translate=global.messages.validate.email.invalid> Your e-mail is invalid. </p> <p class=help-block ng-show=form.email.$error.minlength translate=global.messages.validate.email.minlength> Your e-mail is required to be at least 5 characters. </p> <p class=help-block ng-show=form.email.$error.maxlength translate=global.messages.validate.email.maxlength> Your e-mail cannot be longer than 100 characters. </p> </div> </div> <div class=form-group> <label for=password translate=global.form.newpassword>New password</label> <input type=password class=form-control id=password name=password placeholder=\"{{'global.form.newpassword.placeholder' | translate}}\" ng-model=registerAccount.password ng-minlength=5 ng-maxlength=50 required> <div ng-show=\"form.password.$dirty && form.password.$invalid\"> <p class=help-block ng-show=form.password.$error.required translate=global.messages.validate.newpassword.required> Your password is required. </p> <p class=help-block ng-show=form.password.$error.minlength translate=global.messages.validate.newpassword.minlength> Your password is required to be at least 5 characters. </p> <p class=help-block ng-show=form.password.$error.maxlength translate=global.messages.validate.newpassword.maxlength> Your password cannot be longer than 50 characters. </p> </div> <password-strength-bar password-to-check=registerAccount.password></password-strength-bar> </div> <div class=form-group> <label for=confirmPassword translate=global.form.confirmpassword>New password confirmation</label> <input type=password class=form-control id=confirmPassword name=confirmPassword placeholder=\"{{'global.form.confirmpassword.placeholder' | translate}}\" ng-model=confirmPassword ng-minlength=5 ng-maxlength=50 required> <div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"> <p class=help-block ng-show=form.confirmPassword.$error.required translate=global.messages.validate.confirmpassword.required> Your confirmation password is required. </p> <p class=help-block ng-show=form.confirmPassword.$error.minlength translate=global.messages.validate.confirmpassword.minlength> Your confirmation password is required to be at least 5 characters. </p> <p class=help-block ng-show=form.confirmPassword.$error.maxlength translate=global.messages.validate.confirmpassword.maxlength> Your confirmation password cannot be longer than 50 characters. </p> </div> </div> <button type=submit ng-disabled=form.$invalid class=\"btn btn-primary\" translate=register.form.button>Register</button> </form> <p></p> <div class=\"alert alert-warning\" translate=global.messages.info.authenticated> If you want to <a class=alert-link href=#/login>sign in</a>, you can try the default accounts:<br/>- Administrator (login=\"admin\" and password=\"admin\") <br/>- User (login=\"user\" and password=\"user\"). </div> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/account/reset/finish/reset.finish.html',
    "<div> <div class=row> <div class=\"col-md-4 col-md-offset-4\"> <h1 translate=reset.finish.title>Reset password</h1> <div class=\"alert alert-danger\" translate=reset.finish.messages.keymissing ng-show=keyMissing> <strong>The password reset key is missing.</strong> </div> <div class=\"alert alert-warning\" ng-hide=\"success || keyMissing\"> <p translate=reset.finish.messages.info>Choose a new password</p> </div> <div class=\"alert alert-danger\" ng-show=error> <p translate=reset.finish.messages.error>Your password couldn't be reset. Remember a password request is only valid for 24 hours.</p> </div> <div class=\"alert alert-success\" ng-show=success> <p translate=reset.finish.messages.success><strong>Your password has been reset.</strong> Please <a class=alert-link href=#/login>sign in</a>.</p> </div> <div class=\"alert alert-danger\" ng-show=doNotMatch translate=global.messages.error.dontmatch> The password and its confirmation do not match! </div> <div ng-hide=keyMissing> <form ng-show=!success name=form role=form novalidate ng-submit=finishReset() show-validation> <div class=form-group> <label for=password translate=global.form.newpassword>New password</label> <input type=password class=form-control id=password name=password placeholder=\"{{'global.form.newpassword.placeholder' | translate}}\" ng-model=resetAccount.password ng-minlength=5 ng-maxlength=50 required> <div ng-show=\"form.password.$dirty && form.password.$invalid\"> <p class=help-block ng-show=form.password.$error.required translate=global.messages.validate.newpassword.required> Your password is required. </p> <p class=help-block ng-show=form.password.$error.minlength translate=global.messages.validate.newpassword.minlength> Your password is required to be at least 5 characters. </p> <p class=help-block ng-show=form.password.$error.maxlength translate=global.messages.validate.newpassword.maxlength> Your password cannot be longer than 50 characters. </p> </div> <password-strength-bar password-to-check=resetAccount.password></password-strength-bar> </div> <div class=form-group> <label for=confirmPassword translate=global.form.confirmpassword>New password confirmation</label> <input type=password class=form-control id=confirmPassword name=confirmPassword placeholder=\"{{'global.form.confirmpassword.placeholder' | translate}}\" ng-model=confirmPassword ng-minlength=5 ng-maxlength=50 required> <div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"> <p class=help-block ng-show=form.confirmPassword.$error.required translate=global.messages.validate.confirmpassword.required> Your password confirmation is required. </p> <p class=help-block ng-show=form.confirmPassword.$error.minlength translate=global.messages.validate.confirmpassword.minlength> Your password confirmation is required to be at least 5 characters. </p> <p class=help-block ng-show=form.confirmPassword.$error.maxlength translate=global.messages.validate.confirmpassword.maxlength> Your password confirmation cannot be longer than 50 characters. </p> </div> </div> <button type=submit ng-disabled=form.$invalid class=\"btn btn-primary\" translate=reset.finish.form.button>Reset Password</button> </form> </div> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/account/reset/request/reset.request.html',
    "<div> <div class=row> <div class=\"col-md-8 col-md-offset-2\"> <h1 translate=reset.request.title>Reset your password</h1> <div class=\"alert alert-danger\" translate=reset.request.messages.notfound ng-show=errorEmailNotExists> <strong>E-Mail address isn't registered!</strong> Please check and try again. </div> <div class=\"alert alert-warning\" ng-hide=success> <p translate=reset.request.messages.info>Enter the e-mail address you used to register.</p> </div> <div class=\"alert alert-success\" ng-show=\"success == 'OK'\"> <p translate=reset.request.messages.success>Check your e-mails for details on how to reset your password.</p> </div> <form ng-show=!success name=form role=form novalidate ng-submit=requestReset() show-validation> <div class=form-group> <label for=email translate=global.form.email>E-mail</label> <input type=email class=form-control id=email name=email placeholder=\"{{'global.form.email.placeholder' | translate}}\" ng-model=resetAccount.email ng-minlength=5 ng-maxlength=100 required> <div ng-show=\"form.email.$dirty && form.email.$invalid\"> <p class=help-block ng-show=form.email.$error.required translate=global.messages.validate.email.required> Your e-mail is required. </p> <p class=help-block ng-show=form.email.$error.email translate=global.messages.validate.email.invalid> Your e-mail is invalid. </p> <p class=help-block ng-show=form.email.$error.minlength translate=global.messages.validate.email.minlength> Your e-mail is required to be at least 5 characters. </p> <p class=help-block ng-show=form.email.$error.maxlength translate=global.messages.validate.email.maxlength> Your e-mail cannot be longer than 100 characters. </p> </div> </div> <button type=submit ng-disabled=form.$invalid class=\"btn btn-primary\" translate=reset.request.form.button>Register</button> </form> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/account/settings/settings.html',
    "<div> <div class=row> <div class=\"col-md-8 col-md-offset-2\"> <h2 translate=settings.title translate-values=\"{username: '{{settingsAccount.login}}'}\">User settings for [<b>{{settingsAccount.login}}</b>]</h2> <div class=\"alert alert-success\" ng-show=success translate=settings.messages.success> <strong>Settings saved!</strong> </div> <div class=\"alert alert-danger\" ng-show=errorEmailExists translate=settings.messages.error.emailexists> <strong>E-mail is already in use!</strong> Please choose another one. </div> <div class=\"alert alert-danger\" ng-show=error translate=settings.messages.error.fail> <strong>An error has occurred!</strong> Settings could not be saved. </div> <form name=form role=form novalidate ng-submit=save() show-validation> <div class=form-group> <label for=firstName translate=settings.form.firstname>First Name</label> <input class=form-control id=firstName name=firstName placeholder=\"{{'settings.form.firstname.placeholder' | translate}}\" ng-model=settingsAccount.firstName ng-minlength=1 ng-maxlength=50 required maxlength=50> <div ng-show=\"form.firstName.$dirty && form.firstName.$invalid\"> <p class=help-block ng-show=form.firstName.$error.required translate=settings.messages.validate.firstname.required> Your first name is required. </p> <p class=help-block ng-show=form.firstName.$error.minlength translate=settings.messages.validate.firstname.minlength> Your first name is required to be at least 1 character. </p> <p class=help-block ng-show=form.firstName.$error.maxlength translate=settings.messages.validate.firstname.maxlength> Your first name cannot be longer than 50 characters. </p> </div> </div> <div class=form-group> <label for=lastName translate=settings.form.lastname>Last Name</label> <input class=form-control id=lastName name=lastName placeholder=\"{{'settings.form.lastname.placeholder' | translate}}\" ng-model=settingsAccount.lastName ng-minlength=1 ng-maxlength=50 required maxlength=50> <div ng-show=\"form.lastName.$dirty && form.lastName.$invalid\"> <p class=help-block ng-show=form.lastName.$error.required translate=settings.messages.validate.lastname.required> Your last name is required. </p> <p class=help-block ng-show=form.lastName.$error.minlength translate=settings.messages.validate.lastname.minlength> Your last name is required to be at least 1 character. </p> <p class=help-block ng-show=form.lastName.$error.maxlength translate=settings.messages.validate.lastname.maxlength> Your last name cannot be longer than 50 characters. </p> </div> </div> <div class=form-group> <label for=email translate=global.form.email>E-mail</label> <input type=email class=form-control id=email name=email placeholder=\"{{'global.form.email.placeholder' | translate}}\" ng-model=settingsAccount.email ng-minlength=5 ng-maxlength=100 required maxlength=100> <div ng-show=\"form.email.$dirty && form.email.$invalid\"> <p class=help-block ng-show=form.email.$error.required translate=global.messages.validate.email.required> Your e-mail is required. </p> <p class=help-block ng-show=form.email.$error.email translate=global.messages.validate.email.invalid> Your e-mail is invalid. </p> <p class=help-block ng-show=form.email.$error.minlength translate=global.messages.validate.email.minlength> Your e-mail is required to be at least 5 characters. </p> <p class=help-block ng-show=form.email.$error.maxlength translate=global.messages.validate.email.maxlength> Your e-mail cannot be longer than 100 characters. </p> </div> </div> <div class=form-group> <label for=langKey translate=settings.form.language>Language</label> <select id=langKey name=langKey class=form-control ng-model=settingsAccount.langKey ng-controller=LanguageController ng-options=\"code as (code | findLanguageFromKey) for code in languages\"></select> </div> <button type=submit ng-disabled=form.$invalid class=\"btn btn-primary\" translate=settings.form.button>Save</button> </form> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/admin/audits/audits.html',
    "<div> <h2 translate=audits.title>Audits</h2> <div class=row> <div class=col-md-5> <h4 translate=audits.filter.title>Filter by date</h4> <p class=input-group> <span class=input-group-addon translate=audits.filter.from>from</span> <input type=date class=\"input-sm form-control\" name=start ng-model=fromDate ng-change=onChangeDate() required/> <span class=input-group-addon translate=audits.filter.to>to</span> <input type=date class=\"input-sm form-control\" name=end ng-model=toDate ng-change=onChangeDate() required/> </p> </div> </div> <table class=\"table table-condensed table-striped table-bordered table-responsive\"> <thead> <tr> <th ng-click=\"predicate = 'timestamp'; reverse=!reverse\"><span translate=audits.table.header.date>Date</span></th> <th ng-click=\"predicate = 'principal'; reverse=!reverse\"><span translate=audits.table.header.principal>User</span></th> <th ng-click=\"predicate = 'type'; reverse=!reverse\"><span translate=audits.table.header.status>State</span></th> <th ng-click=\"predicate = 'data.message'; reverse=!reverse\"><span translate=audits.table.header.data>Extra data</span></th> </tr> </thead> <tr ng-repeat=\"audit in audits | filter:filter | orderBy:predicate:reverse\" ng-hide=audit.filtered> <td><span>{{audit.timestamp| date:'medium'}}</span></td> <td><small>{{audit.principal}}</small></td> <td>{{audit.type}}</td> <td> <span ng-show=audit.data.message>{{audit.data.message}}</span> <span ng-show=audit.data.remoteAddress><span translate=audits.table.data.remoteAddress>Remote Address</span> {{audit.data.remoteAddress}}</span> </td> </tr> </table> </div>"
  );


  $templateCache.put('scripts/app/admin/configuration/configuration.html',
    "<div> <h2 translate=configuration.title>configuration</h2> <span translate=configuration.filter>Filter (by prefix)</span> <input ng-model=filter class=form-control> <table class=\"table table-condensed table-striped table-bordered table-responsive\" style=table-layout:fixed> <thead> <tr> <th ng-click=\"predicate = 'prefix'; reverse=!reverse\" class=col-sm-4><span translate=configuration.table.prefix>Prefix</span></th> <th translate=configuration.table.properties class=col-sm-8>Properties</th> </tr> </thead> <tr ng-repeat=\"entry in configuration | filter:filter | orderBy:predicate:reverse\"> <td><span>{{entry.prefix}}</span></td> <td> <div class=row ng-repeat=\"(key, value) in entry.properties\"> <div class=col-md-4>{{key}}</div> <div class=col-md-8><span class=\"pull-right label label-info\" style=\"white-space: normal;word-break:break-all\">{{value}}</span></div> </div> </td> </tr> </table> </div>"
  );


  $templateCache.put('scripts/app/admin/docs/docs.html',
    "<iframe src=swagger-ui/index.html frameborder=0 marginheight=0 marginwidth=0 width=100% height=900 scrolling=auto target=_top></iframe>"
  );


  $templateCache.put('scripts/app/admin/health/health.html',
    "<div> <h2 translate=health.title>Health Checks</h2> <p> <button type=button class=\"btn btn-primary\" ng-click=refresh()><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span translate=health.refresh.button>Refresh</span> </button> </p> <table id=healthCheck class=\"table table-striped\"> <thead> <tr> <th class=col-md-7 translate=health.table.service>Service Name</th> <th class=\"col-md-2 text-center\" translate=health.table.status>Status</th> <th class=\"col-md-2 text-center\" translate=health.details.details>Details</th> </tr> </thead> <tbody> <tr ng-repeat=\"health in healthData\"> <td>{{'health.indicator.' + baseName(health.name) | translate}} {{subSystemName(health.name)}}</td> <td class=text-center> <span class=label ng-class=getLabelClass(health.status)> {{'health.status.' + health.status | translate}} </span> </td> <td class=text-center> <a class=hand ng-click=showHealth(health) ng-show=\"health.details || health.error\"> <i class=\"glyphicon glyphicon-eye-open\"></i> </a> </td> </tr> </tbody> </table> </div>"
  );


  $templateCache.put('scripts/app/admin/health/health.modal.html',
    "<div class=modal-header> <button aria-label=Close data-dismiss=modal class=close type=button ng-click=cancel()><span aria-hidden=true>&times;</span> </button> <h4 class=modal-title id=showHealthLabel> {{'health.indicator.' + baseName(currentHealth.name) | translate}} {{subSystemName(currentHealth.name)}} </h4> </div> <div class=\"modal-body pad\"> <div ng-show=currentHealth.details> <h4 translate=health.details.properties>Properties</h4> <table class=\"table table-striped\"> <thead> <tr> <th class=\"col-md-6 text-left\" translate=health.details.name>Name</th> <th class=\"col-md-6 text-left\" translate=health.details.value>Value</th> </tr> </thead> <tbody> <tr ng-repeat=\"(k,v) in currentHealth.details\"> <td class=\"col-md-6 text-left\">{{k}}</td> <td class=\"col-md-6 text-left\">{{v}}</td> </tr> </tbody> </table> </div> <div ng-show=currentHealth.error> <h4 translate=health.details.error>Error</h4> <pre>{{currentHealth.error}}</pre> </div> </div> <div class=modal-footer> <button data-dismiss=modal class=\"btn btn-default pull-left\" type=button ng-click=cancel()>Done</button> </div>"
  );


  $templateCache.put('scripts/app/admin/logs/logs.html',
    "<div> <h2 translate=logs.title>Logs</h2> <p translate=logs.nbloggers translate-values=\"{total: '{{ loggers.length }}'}\">There are {{ loggers.length }} loggers.</p> <span translate=logs.filter>Filter</span> <input ng-model=filter class=form-control> <table class=\"table table-condensed table-striped table-bordered table-responsive\"> <thead> <tr title=\"click to order\"> <th ng-click=\"predicate = 'name'; reverse=!reverse\"><span translate=logs.table.name>Name</span></th> <th ng-click=\"predicate = 'level'; reverse=!reverse\"><span translate=logs.table.level>Level</span></th> </tr> </thead> <tr ng-repeat=\"logger in loggers | filter:filter | orderBy:predicate:reverse\"> <td><small>{{logger.name | characters:140}}</small></td> <td> <button ng-click=\"changeLevel(logger.name, 'TRACE')\" ng-class=\"(logger.level=='TRACE') ? 'btn-danger' : 'btn-default'\" class=\"btn btn-default btn-xs\">TRACE</button> <button ng-click=\"changeLevel(logger.name, 'DEBUG')\" ng-class=\"(logger.level=='DEBUG') ? 'btn-warning' : 'btn-default'\" class=\"btn btn-default btn-xs\">DEBUG</button> <button ng-click=\"changeLevel(logger.name, 'INFO')\" ng-class=\"(logger.level=='INFO') ? 'btn-info' : 'btn-default'\" class=\"btn btn-default btn-xs\">INFO</button> <button ng-click=\"changeLevel(logger.name, 'WARN')\" ng-class=\"(logger.level=='WARN') ? 'btn-success' : 'btn-default'\" class=\"btn btn-default btn-xs\">WARN</button> <button ng-click=\"changeLevel(logger.name, 'ERROR')\" ng-class=\"(logger.level=='ERROR') ? 'btn-primary' : 'btn-default'\" class=\"btn btn-default btn-xs\">ERROR</button> </td> </tr> </table> </div>"
  );


  $templateCache.put('scripts/app/admin/metrics/metrics.html',
    "<div> <h2 translate=metrics.title>Application Metrics</h2> <p> <button type=button class=\"btn btn-primary\" ng-click=refresh()><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span translate=metrics.refresh.button>Refresh</span></button> </p> <h3 translate=metrics.jvm.title>JVM Metrics</h3> <div class=row ng-hide=updatingMetrics> <div class=col-md-4> <b translate=metrics.jvm.memory.title>Memory</b> <p><span translate=metrics.jvm.memory.total>Total Memory</span> ({{metrics.gauges['jvm.memory.total.used'].value / 1000000 | number:0}}M / {{metrics.gauges['jvm.memory.total.max'].value / 1000000 | number:0}}M)</p> <progressbar min=0 max=\"metrics.gauges['jvm.memory.total.max'].value\" value=\"metrics.gauges['jvm.memory.total.used'].value\" class=\"progress-striped active\" type=success> <span>{{metrics.gauges['jvm.memory.total.used'].value * 100 / metrics.gauges['jvm.memory.total.max'].value | number:0}}%</span> </progressbar> <p><span translate=metrics.jvm.memory.heap>Heap Memory</span> ({{metrics.gauges['jvm.memory.heap.used'].value / 1000000 | number:0}}M / {{metrics.gauges['jvm.memory.heap.max'].value / 1000000 | number:0}}M)</p> <progressbar min=0 max=\"metrics.gauges['jvm.memory.heap.max'].value\" value=\"metrics.gauges['jvm.memory.heap.used'].value\" class=\"progress-striped active\" type=success> <span>{{metrics.gauges['jvm.memory.heap.used'].value * 100 / metrics.gauges['jvm.memory.heap.max'].value | number:0}}%</span> </progressbar> <p><span translate=metrics.jvm.memory.nonheap>Non-Heap Memory</span> ({{metrics.gauges['jvm.memory.non-heap.used'].value / 1000000 | number:0}}M / {{metrics.gauges['jvm.memory.non-heap.committed'].value / 1000000 | number:0}}M)</p> <progressbar min=0 max=\"metrics.gauges['jvm.memory.non-heap.committed'].value\" value=\"metrics.gauges['jvm.memory.non-heap.used'].value\" class=\"progress-striped active\" type=success> <span>{{metrics.gauges['jvm.memory.non-heap.used'].value * 100 / metrics.gauges['jvm.memory.non-heap.committed'].value | number:0}}%</span> </progressbar> </div> <div class=col-md-4> <b translate=metrics.jvm.threads.title>Threads</b> (Total: {{metrics.gauges['jvm.threads.count'].value}}) <a class=hand ng-click=refreshThreadDumpData() data-toggle=modal data-target=#threadDump><i class=\"glyphicon glyphicon-eye-open\"></i></a> <p><span translate=metrics.jvm.threads.runnable>Runnable</span> {{metrics.gauges['jvm.threads.runnable.count'].value}}</p> <progressbar min=0 value=\"metrics.gauges['jvm.threads.runnable.count'].value\" max=\"metrics.gauges['jvm.threads.count'].value\" class=\"progress-striped active\" type=success> <span>{{metrics.gauges['jvm.threads.runnable.count'].value * 100 / metrics.gauges['jvm.threads.count'].value | number:0}}%</span> </progressbar> <p><span translate=metrics.jvm.threads.timedwaiting>Timed Waiting</span> ({{metrics.gauges['jvm.threads.timed_waiting.count'].value}})</p> <progressbar min=0 value=\"metrics.gauges['jvm.threads.timed_waiting.count'].value\" max=\"metrics.gauges['jvm.threads.count'].value\" class=\"progress-striped active\" type=warning> <span>{{metrics.gauges['jvm.threads.timed_waiting.count'].value * 100 / metrics.gauges['jvm.threads.count'].value | number:0}}%</span> </progressbar> <p><span translate=metrics.jvm.threads.waiting>Waiting</span> ({{metrics.gauges['jvm.threads.waiting.count'].value}})</p> <progressbar min=0 value=\"metrics.gauges['jvm.threads.waiting.count'].value\" max=\"metrics.gauges['jvm.threads.count'].value\" class=\"progress-striped active\" type=warning> <span>{{metrics.gauges['jvm.threads.waiting.count'].value * 100 / metrics.gauges['jvm.threads.count'].value | number:0}}%</span> </progressbar> <p><span translate=metrics.jvm.threads.blocked>Blocked</span> ({{metrics.gauges['jvm.threads.blocked.count'].value}})</p> <progressbar min=0 value=\"metrics.gauges['jvm.threads.blocked.count'].value\" max=\"metrics.gauges['jvm.threads.count'].value\" class=\"progress-striped active\" type=success> <span>{{metrics.gauges['jvm.threads.blocked.count'].value * 100 / metrics.gauges['jvm.threads.count'].value | number:0}}%</span> </progressbar> </div> <div class=col-md-4> <b translate=metrics.jvm.gc.title>Garbage collections</b> <div class=row> <div class=col-md-9 translate=metrics.jvm.gc.marksweepcount>Mark Sweep count</div> <div class=\"col-md-3 text-right\">{{metrics.gauges['jvm.garbage.PS-MarkSweep.count'].value}}</div> </div> <div class=row> <div class=col-md-9 translate=metrics.jvm.gc.marksweeptime>Mark Sweep time</div> <div class=\"col-md-3 text-right\">{{metrics.gauges['jvm.garbage.PS-MarkSweep.time'].value}}ms</div> </div> <div class=row> <div class=col-md-9 translate=metrics.jvm.gc.scavengecount>Scavenge count</div> <div class=\"col-md-3 text-right\">{{metrics.gauges['jvm.garbage.PS-Scavenge.count'].value}}</div> </div> <div class=row> <div class=col-md-9 translate=metrics.jvm.gc.scavengetime>Scavenge time</div> <div class=\"col-md-3 text-right\">{{metrics.gauges['jvm.garbage.PS-Scavenge.time'].value}}ms</div> </div> </div> </div> <div class=\"well well-lg\" ng-show=updatingMetrics translate=metrics.updating>Updating...</div> <h3 translate=metrics.jvm.http.title>HTTP requests (events per second)</h3> <p><span translate=metrics.jvm.http.active>Active requests</span> <b>{{metrics.counters['com.codahale.metrics.servlet.InstrumentedFilter.activeRequests'].count | number:0}}</b> - <span translate=metrics.jvm.http.total>Total requests</span> <b>{{metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count | number:0}}</b></p> <div class=table-responsive> <table class=\"table table-striped\"> <thead> <tr> <th translate=metrics.jvm.http.table.code>Code</th> <th translate=metrics.jvm.http.table.count>Count</th> <th class=text-right translate=metrics.jvm.http.table.mean>Mean</th> <th class=text-right><span translate=metrics.jvm.http.table.average>Average</span> (1 min)</th> <th class=text-right><span translate=metrics.jvm.http.table.average>Average</span> (5 min)</th> <th class=text-right><span translate=metrics.jvm.http.table.average>Average</span> (15 min)</th> </tr> </thead> <tbody> <tr> <td translate=metrics.jvm.http.code.ok>OK</td> <td> <progressbar min=0 max=\"metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count\" value=\"metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].count\" class=\"progress-striped active\" type=success> <span>{{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].count}}</span> </progressbar> </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].mean_rate | number:2}} </td> <td class=text-right>{{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m1_rate | number:2}} </td> <td class=text-right>{{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m5_rate | number:2}} </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m15_rate | number:2}} </td> </tr> <tr> <td translate=metrics.jvm.http.code.notfound>Not Found</td> <td> <progressbar min=0 max=\"metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count\" value=\"metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].count\" class=\"progress-striped active\" type=success> <span>{{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].count}}</span> </progressbar> </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].mean_rate | number:2}} </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m1_rate | number:2}} </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m5_rate | number:2}} </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m15_rate | number:2}} </td> </tr> <tr> <td translate=metrics.jvm.http.code.servererror>Server error</td> <td> <progressbar min=0 max=\"metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count\" value=\"metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].count\" class=\"progress-striped active\" type=success> <span>{{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].count}}</span> </progressbar> </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].mean_rate | number:2}} </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m1_rate | number:2}} </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m5_rate | number:2}} </td> <td class=text-right> {{metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m15_rate | number:2}} </td> </tr> </tbody> </table> </div> <h3 translate=metrics.servicesstats.title>Services statistics (time in millisecond)</h3> <div class=table-responsive> <table class=\"table table-striped\"> <thead> <tr> <th translate=metrics.servicesstats.table.name>Service name</th> <th class=text-right translate=metrics.servicesstats.table.count>Count</th> <th class=text-right translate=metrics.servicesstats.table.mean>Mean</th> <th class=text-right translate=metrics.servicesstats.table.min>Min</th> <th class=text-right translate=metrics.servicesstats.table.p50>p50</th> <th class=text-right translate=metrics.servicesstats.table.p75>p75</th> <th class=text-right translate=metrics.servicesstats.table.p95>p95</th> <th class=text-right translate=metrics.servicesstats.table.p99>p99</th> <th class=text-right translate=metrics.servicesstats.table.max>Max</th> </tr> </thead> <tbody> <tr ng-repeat=\"(k, v) in servicesStats\"> <td>{{k}}</td> <td class=text-right>{{v.count}}</td> <td class=text-right>{{v.mean * 1000 | number:0}}</td> <td class=text-right>{{v.min * 1000 | number:0}}</td> <td class=text-right>{{v.p50 * 1000 | number:0}}</td> <td class=text-right>{{v.p75 * 1000 | number:0}}</td> <td class=text-right>{{v.p95 * 1000 | number:0}}</td> <td class=text-right>{{v.p99 * 1000 | number:0}}</td> <td class=text-right>{{v.max * 1000 | number:0}}</td> </tr> </tbody> </table> </div> <h3 translate=metrics.ehcache.title>Ehcache statistics</h3> <div class=table-responsive> <table class=\"table table-striped\"> <thead> <tr> <th translate=metrics.ehcache.cachename>Cache name</th> <th class=text-right translate=metrics.ehcache.objects>Objects</th> <th class=text-right translate=metrics.ehcache.hits>Hits</th> <th class=text-right translate=metrics.ehcache.misses>Misses</th> <th class=text-right translate=metrics.ehcache.evictioncount>Eviction count</th> <th class=text-right translate=metrics.ehcache.mean>Mean get time (ms)</th> </tr> </thead> <tbody> <tr ng-repeat=\"(k, v) in cachesStats\" ng-once> <td>{{v.name}}</td> <td class=text-right>{{metrics.gauges[k + '.objects'].value}}</td> <td class=text-right>{{metrics.gauges[k + '.hits'].value}}</td> <td class=text-right>{{metrics.gauges[k + '.misses'].value}}</td> <td class=text-right>{{metrics.gauges[k + '.eviction-count'].value}}</td> <td class=text-right>{{metrics.gauges[k + '.mean-get-time'].value | number:2}}</td> </tr> </tbody> </table> </div> <h3 translate=metrics.datasource.title ng-show=\"metrics.gauges['HikariPool-0.pool.TotalConnections'].value > 0\">DataSource statistics (time in millisecond)</h3> <div class=table-responsive ng-show=\"metrics.gauges['HikariPool-0.pool.TotalConnections'].value > 0\"> <table class=\"table table-striped\"> <thead> <tr> <th><span translate=metrics.datasource.usage>Usage</span> ({{metrics.gauges['HikariPool-0.pool.ActiveConnections'].value}} / {{metrics.gauges['HikariPool-0.pool.TotalConnections'].value}})</th> <th class=text-right translate=metrics.datasource.count>Count</th> <th class=text-right translate=metrics.datasource.mean>Mean</th> <th class=text-right translate=metrics.datasource.min>Min</th> <th class=text-right translate=metrics.datasource.p50>p50</th> <th class=text-right translate=metrics.datasource.p75>p75</th> <th class=text-right translate=metrics.datasource.p95>p95</th> <th class=text-right translate=metrics.datasource.p99>p99</th> <th class=text-right translate=metrics.datasource.max>Max</th> </tr> </thead> <tbody> <tr> <td> <div class=\"progress progress-striped\"> <progressbar min=0 max=\"metrics.gauges['HikariPool-0.pool.TotalConnections'].value\" value=\"metrics.gauges['HikariPool-0.pool.ActiveConnections'].value\" class=\"progress-striped active\" type=success> <span>{{metrics.gauges['HikariPool-0.pool.ActiveConnections'].value * 100 / metrics.gauges['HikariPool-0.pool.TotalConnections'].value | number:0}}%</span> </progressbar> </div> </td> <td class=text-right>{{metrics.histograms['HikariPool-0.pool.Usage'].count}}</td> <td class=text-right>{{metrics.histograms['HikariPool-0.pool.Usage'].mean | number:2}}</td> <td class=text-right>{{metrics.histograms['HikariPool-0.pool.Usage'].min | number:2}}</td> <td class=text-right>{{metrics.histograms['HikariPool-0.pool.Usage'].p50 | number:2}}</td> <td class=text-right>{{metrics.histograms['HikariPool-0.pool.Usage'].p75 | number:2}}</td> <td class=text-right>{{metrics.histograms['HikariPool-0.pool.Usage'].p95 | number:2}}</td> <td class=text-right>{{metrics.histograms['HikariPool-0.pool.Usage'].p99 | number:2}}</td> <td class=text-right>{{metrics.histograms['HikariPool-0.pool.Usage'].max | number:2}}</td> </tr> </tbody> </table> </div> </div>"
  );


  $templateCache.put('scripts/app/admin/metrics/metrics.modal.html',
    "<!-- Modal used to display the threads dump --> <div class=modal-header> <button type=button class=close ng-click=cancel()>&times;</button> <h4 class=modal-title translate=metrics.jvm.threads.dump.title>Threads dump</h4> </div> <div class=\"modal-body pad\"> <span class=\"label label-primary\" ng-click=\"threadDumpFilter = {}\">All&nbsp;<span class=badge>{{threadDumpAll}}</span></span>&nbsp; <span class=\"label label-success\" ng-click=\"threadDumpFilter = {threadState: 'RUNNABLE'}\">Runnable&nbsp;<span class=badge>{{threadDumpRunnable}}</span></span>&nbsp; <span class=\"label label-info\" ng-click=\"threadDumpFilter = {threadState: 'WAITING'}\">Waiting&nbsp;<span class=badge>{{threadDumpWaiting}}</span></span>&nbsp; <span class=\"label label-warning\" ng-click=\"threadDumpFilter = {threadState: 'TIMED_WAITING'}\">Timed Waiting&nbsp;<span class=badge>{{threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\"label label-danger\" ng-click=\"threadDumpFilter = {threadState: 'BLOCKED'}\">Blocked&nbsp;<span class=badge>{{threadDumpBlocked}}</span></span>&nbsp; <div class=voffset2>&nbsp;</div> Filter <input ng-model=threadDumpFilter class=form-control> <div class=\"row pad\" ng-repeat=\"(k, v) in threadDump | filter:threadDumpFilter\"> <h5><span class=label ng-class=getLabelClass(v.threadState)>{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\"show = !show\"> <span ng-show=!show translate=metrics.jvm.threads.dump.show>Show StackTrace</span> <span ng-show=show translate=metrics.jvm.threads.dump.hide>Hide StackTrace</span> </a> </h5> <div class=well ng-show=show> <div ng-repeat=\"(stK, stV) in v.stackTrace\"> {{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=voffset1></span> </div> </div> <table class=\"table table-condensed\"> <thead> <tr> <th class=text-right translate=metrics.jvm.threads.dump.blockedtime>Blocked Time</th> <th class=text-right translate=metrics.jvm.threads.dump.blockedcount>Blocked Count</th> <th class=text-right translate=metrics.jvm.threads.dump.waitedtime>Waited Time</th> <th class=text-right translate=metrics.jvm.threads.dump.waitedcount>Waited Count</th> <th translate=metrics.jvm.threads.dump.lockname>Lock Name</th> </tr> </thead> <tbody> <tr> <td>{{v.blockedTime}}</td> <td>{{v.blockedCount}}</td> <td>{{v.waitedTime}}</td> <td>{{v.waitedCount}}</td> <td>{{v.lockName}}</td> </tr> </tbody> </table> </div> </div> <div class=modal-footer> <button type=button class=\"btn btn-default pull-left\" data-dismiss=modal ng-click=cancel()>Done</button> </div>"
  );


  $templateCache.put('scripts/app/admin/user-management/user-management-detail.html',
    "<div> <h2><span translate=user-management.detail.title>User</span> \"{{user.login}}\"</h2> <div class=table-responsive> <table class=\"table table-striped\"> <thead> <tr> <th translate=entity.detail.field>Field</th> <th translate=entity.detail.value>Value</th> </tr> </thead> <tbody> <tr> <td> <span translate=user-management.login>Login</span> </td> <td> <input class=\"input-sm form-control\" value={{user.login}} readonly> </td> </tr> <tr> <td> <span translate=user-management.firstName>FirstName</span> </td> <td> <input class=\"input-sm form-control\" value={{user.firstName}} readonly> </td> </tr> <tr> <td> <span translate=user-management.lastName>LastName</span> </td> <td> <input class=\"input-sm form-control\" value={{user.lastName}} readonly> </td> </tr> <tr> <td> <span translate=user-management.email>Email</span> </td> <td> <input class=\"input-sm form-control\" value={{user.email}} readonly> </td> </tr> <tr> <td> <span translate=user-management.activated>Activated</span> </td> <td> <input class=\"input-sm form-control\" value={{user.activated}} readonly> </td> </tr> <tr> <td> <span translate=user-management.langKey>LangKey</span> </td> <td> <input class=\"input-sm form-control\" value={{user.langKey}} readonly> </td> </tr> <tr> <td> <span translate=user-management.createdBy>CreatedBy</span> </td> <td> <input class=\"input-sm form-control\" value={{user.createdBy}} readonly> </td> </tr> <tr> <td> <span translate=user-management.createdDate>CreatedDate</span> </td> <td> <input class=\"input-sm form-control\" value=\"{{user.createdDate | date:'dd/MM/yy HH:mm' }}\" readonly> </td> </tr> <tr> <td> <span translate=user-management.lastModifiedBy>LastModifiedBy</span> </td> <td> <input class=\"input-sm form-control\" value={{user.lastModifiedBy}} readonly> </td> </tr> <tr> <td> <span translate=user-management.lastModifiedDate>LastCreatedDate</span> </td> <td> <input class=\"input-sm form-control\" value=\"{{user.lastModifiedDate | date:'dd/MM/yy HH:mm'}}\" readonly> </td> </tr> <tr> <td> <span translate=user-management.profiles>Profiles</span> </td> <td> <ul class=list-unstyled> <li ng-repeat=\"authority in user.authorities\"><span>{{authority}}</span></li> </ul> </td> </tr> </tbody> </table> </div> <button type=submit ui-sref=user-management class=\"btn btn-info\"> <span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span translate=entity.action.back> Back</span> </button> </div>"
  );


  $templateCache.put('scripts/app/admin/user-management/user-management.html',
    "<div> <div class=row> <h2 class=col-sm-6 translate=user-management.home.title>Users</h2> </div> <div class=\"modal fade\" id=saveUserModal tabindex=-1 role=dialog aria-labelledby=myUserLabel aria-hidden=true> <div class=modal-dialog> <div class=modal-content> <form name=editForm role=form novalidate ng-submit=save() show-validation> <div class=modal-header> <button type=button class=close data-dismiss=modal aria-hidden=true ng-click=clear()>&times;</button> <h4 class=modal-title id=myUserLabel translate=user-management.home.createOrEditLabel> Create or edit a User</h4> </div> <div class=modal-body> <div class=form-group> <label translate=global.field.id>ID</label> <input class=form-control name=id ng-model=user.id readonly> </div> <div class=form-group> <label translate=user-management.login>Login</label> <input class=form-control name=login ng-model=user.login ng-required=\"user.id == null\" ng-maxlength=50> <div ng-show=editForm.login.$invalid> <p class=help-block ng-show=editForm.login.$error.required translate=entity.validation.required> This field is required. </p> <p class=help-block ng-show=editForm.login.$error.maxlength translate=entity.validation.maxlength translate-value-max=50> This field cannot be longer than 50 characters. </p> </div> </div> <div class=form-group> <label translate=user-management.firstName>FirstName</label> <input class=form-control name=firstName ng-model=user.firstName ng-maxlength=50> <div ng-show=editForm.firstName.$invalid> <p class=help-block ng-show=editForm.firstName.$error.maxlength translate=entity.validation.maxlength translate-value-max=50> This field cannot be longer than 50 characters. </p> </div> </div> <div class=form-group> <label translate=user-management.lastName>LastName</label> <input class=form-control name=lastName ng-model=user.lastName ng-maxlength=50> <div ng-show=editForm.lastName.$invalid> <p class=help-block ng-show=editForm.lastName.$error.maxlength translate=entity.validation.maxlength translate-value-max=50> This field cannot be longer than 50 characters. </p> </div> </div> <div class=form-group> <label translate=user-management.email>Email</label> <input class=form-control name=email ng-model=user.email required ng-maxlength=100> <div ng-show=editForm.email.$invalid> <p class=help-block ng-show=editForm.email.$error.required translate=entity.validation.required> This field is required. </p> <p class=help-block ng-show=editForm.email.$error.maxlength translate=entity.validation.maxlength translate-value-max=100> This field cannot be longer than 100 characters. </p> </div> </div> <div class=form-group> <label for=activated> <input type=checkbox id=activated ng-model=user.activated> <span translate=user-management.activated>Activated</span> </label> </div> <div class=form-group> <label translate=user-management.langKey>LangKey</label> <select class=form-control name=langKey ng-model=user.langKey ng-options=\"language as language for language in languages track by language\"> </select> </div> <div class=form-group> <label translate=user-management.profiles>Profiles</label> <select class=form-control multiple name=authority ng-model=user.authorities ng-options=\"authority for authority in authorities\"> </select> </div> </div> <div class=modal-footer> <button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=clear()> <span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span translate=entity.action.cancel>Cancel</span> </button> <button type=submit ng-disabled=editForm.$invalid class=\"btn btn-primary\"> <span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span translate=entity.action.save>Save</span> </button> </div> </form> </div> </div> </div> <div class=\"modal fade\" id=deleteUserConfirmation> <div class=modal-dialog> <div class=modal-content> <form name=deleteForm ng-submit=confirmDelete(user.id)> <div class=modal-header> <button type=button class=close data-dismiss=modal aria-hidden=true ng-click=clear()>&times;</button> <h4 class=modal-title translate=entity.delete.title>Confirm delete operation</h4> </div> <div class=modal-body> <p translate=user-management.delete.question translate-values=\"{login: '{{user.login}}'}\">Are you sure you want to delete this User?</p> </div> <div class=modal-footer> <button type=button class=\"btn btn-default\" data-dismiss=modal ng-click=clear()> <span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span translate=entity.action.cancel>Cancel</span> </button> <button type=submit ng-disabled=deleteForm.$invalid class=\"btn btn-danger\"> <span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span translate=entity.action.delete>Delete</span> </button> </div> </form> </div> </div> </div> <div class=table-responsive> <table class=\"table table-striped\"> <thead> <tr> <th translate=global.field.id>ID</th> <th translate=user-management.login>Login</th> <th translate=user-management.email>Email</th> <th></th> <th translate=user-management.langKey>LangKey</th> <th translate=user-management.profiles>Profiles</th> <th translate=user-management.createdDate>CreatedDate</th> <th translate=user-management.lastModifiedBy>LastModifiedBy</th> <th translate=user-management.lastModifiedDate>LastModifiedDate</th> <th></th> </tr> </thead> <tbody> <tr ng-repeat=\"user in users track by user.id\"> <td><a ui-sref=user-management-detail({login:user.login})>{{user.id}}</a></td> <td>{{user.login}}</td> <td>{{user.email}}</td> <td> <span class=\"label label-danger\" ng-click=\"setActive(user, true)\" ng-show=!user.activated translate=user-management.deactivated style=\"cursor: pointer\">Desactivated</span> <span class=\"label label-success\" ng-click=\"setActive(user, false)\" ng-show=user.activated translate=user-management.activated style=\"cursor: pointer\">Activated</span> </td> <td>{{user.langKey}}</td> <td> <div ng-repeat=\"authority in user.authorities\"> <span class=\"label label-info\">{{ authority }}</span> </div> </td> <td>{{user.createdDate | date:'dd/MM/yy HH:mm'}}</td> <td>{{user.lastModifiedBy}}</td> <td>{{user.lastModifiedDate | date:'dd/MM/yy HH:mm'}}</td> <td class=text-right> <button type=submit ui-sref=user-management-detail({login:user.login}) class=\"btn btn-info btn-sm\"> <span class=\"glyphicon glyphicon-eye-open\"></span> </button> <button type=submit ng-click=showUpdate(user.login) class=\"btn btn-primary btn-sm\"> <span class=\"glyphicon glyphicon-pencil\"></span> </button> </td> </tr> </tbody> </table> <nav> <ul class=pagination> <li ng-show=\"links['first'] >= 0\" ng-click=\"loadPage(links['first'])\"><a>&lt;&lt;</a></li> <li ng-show=\"page > 0\" ng-click=\"loadPage(links['prev'] || 0)\"><a>&lt;</a></li> <li ng-show=\"page > 1\" ng-click=\"loadPage(page - 2)\"><a>{{page - 1}}</a></li> <li ng-show=\"page > 0\" ng-click=\"loadPage(page - 1)\"><a>{{page}}</a></li> <li class=active><a>{{page + 1}}</a></li> <li ng-show=\"page < links['last']\" ng-click=\"loadPage(page + 1)\"><a>{{page + 2}}</a></li> <li ng-show=\"page < links['last'] - 1\" ng-click=\"loadPage(page + 2)\"><a>{{page + 3}}</a></li> <li ng-show=\"links['next']\" ng-click=\"loadPage(links['next'])\"><a>&gt;</a></li> <li ng-show=\"links['last'] > 0\" ng-click=\"loadPage(links['last'])\"><a>&gt;&gt;</a></li> </ul> </nav> </div> </div>"
  );


  $templateCache.put('scripts/app/error/accessdenied.html',
    "<div ng-cloak> <div class=row> <div class=col-md-4> <span class=\"hipster img-responsive img-rounded\"></span> </div> <div class=col-md-8> <h1 translate=error.title>Error Page!</h1> <div class=\"alert alert-danger\" translate=error.403>You are not authorized to access the page. </div> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/error/error.html',
    "<div ng-cloak> <div class=row> <div class=col-md-4> <span class=\"hipster img-responsive img-rounded\"></span> </div> <div class=col-md-8> <h1 translate=error.title>Error Page!</h1> <div ng-show=errorMessage> <div class=\"alert alert-danger\">{{errorMessage}} </div> </div> </div> </div> </div>"
  );


  $templateCache.put('scripts/app/main/main.html',
    "<div ng-cloak> <div class=row> <div class=col-md-4> <span class=\"hipster img-responsive img-rounded\"></span> </div> <div class=col-md-8> <h1 translate=main.title>Welcome, Java Hipster!</h1> <p class=lead translate=main.subtitle>This is your homepage</p> <div ng-switch=isAuthenticated()> <div class=\"alert alert-success\" ng-switch-when=true translate=main.logged.message translate-values=\"{username: '{{account.login}}'}\"> You are logged in as user \"{{account.login}}\". </div> <div class=\"alert alert-warning\" ng-switch-when=false translate=global.messages.info.authenticated> If you want to <a class=alert-link href=#/login>sign in</a>, you can try the default accounts:<br/>- Administrator (login=\"admin\" and password=\"admin\") <br/>- User (login=\"user\" and password=\"user\"). </div> <div class=\"alert alert-warning\" ng-switch-when=false translate=global.messages.info.register> You don't have an account yet? <a class=alert-link href=#/register>Register a new account</a> </div> </div> <p translate=main.question> If you have any question on JHipster: </p> <ul> <li><a href=\"http://jhipster.github.io/\" target=_blank translate=main.link.homepage>JHipster homepage</a></li> <li><a href=http://stackoverflow.com/tags/jhipster/info target=_blank translate=main.link.stackoverflow>JHipster on Stack Overflow</a></li> <li><a href=\"https://github.com/jhipster/generator-jhipster/issues?state=open\" target=_blank translate=main.link.bugtracker>JHipster bug tracker</a></li> <li><a href=https://gitter.im/jhipster/generator-jhipster target=_blank translate=main.link.chat>JHipster public chat room</a></li> <li><a href=https://twitter.com/java_hipster target=_blank translate=main.link.contact>contact @java_hipster on Twitter</a></li> </ul> <p> <span translate=main.like>If you like JHipster, don't forget to give us a star on </span>&nbsp;<a href=https://github.com/jhipster/generator-jhipster target=_blank translate=main.github>Github</a>! </p> </div> </div> </div>"
  );


  $templateCache.put('scripts/components/form/pager.html',
    "<nav> <ul class=devTalkApp-pager> <li ng-show=\"links['first'] >= 0\" ng-click=\"loadPage(links['first'])\"><a href=#>&lt;&lt;</a></li> <li ng-show=\"page > 0\" ng-click=\"loadPage(links['prev'] || 0)\"><a href=#>&lt;</a></li> <li ng-show=\"links['next']\" ng-click=\"loadPage(links['next'])\"><a href=#>&gt;</a></li> <li ng-show=\"links['last'] > 0\" ng-click=\"loadPage(links['last'])\"><a href=#>&gt;&gt;</a></li> </ul> </nav>"
  );


  $templateCache.put('scripts/components/form/pagination.html',
    "<nav> <ul class=devTalkApp-pagination> <li ng-show=\"links['first'] >= 0\" ng-click=\"loadPage(links['first'])\"><a>&lt;&lt;</a></li> <li ng-show=\"page > 0\" ng-click=\"loadPage(links['prev'] || 0)\"><a>&lt;</a></li> <li ng-show=\"page > 1\" ng-click=\"loadPage(page - 2)\"><a>{{page - 1}}</a></li> <li ng-show=\"page > 0\" ng-click=\"loadPage(page - 1)\"><a>{{page}}</a></li> <li class=active><a>{{page + 1}}</a></li> <li ng-show=\"page < links['last']\" ng-click=\"loadPage(page + 1)\"><a>{{page + 2}}</a></li> <li ng-show=\"page < links['last'] - 1\" ng-click=\"loadPage(page + 2)\"><a>{{page + 3}}</a></li> <li ng-show=\"links['next']\" ng-click=\"loadPage(links['next'])\"><a>&gt;</a></li> <li ng-show=\"links['last'] > 0\" ng-click=\"loadPage(links['last'])\"><a>&gt;&gt;</a></li> </ul> </nav>"
  );


  $templateCache.put('scripts/components/navbar/navbar.html',
    "<nav class=\"navbar navbar-default\" role=navigation> <div class=container> <div class=navbar-header> <button type=button class=navbar-toggle data-toggle=collapse data-target=#navbar-collapse> <span class=sr-only>Toggle navigation</span> <span class=icon-bar></span> <span class=icon-bar></span> <span class=icon-bar></span> </button> <a class=navbar-brand href=\"#/\"><span translate=global.title>jhipster</span> <span class=navbar-version>v{{VERSION}}</span></a> </div> <div class=\"collapse navbar-collapse\" id=navbar-collapse ng-switch=isAuthenticated()> <ul class=\"nav navbar-nav navbar-right\"> <li ui-sref-active=active> <a ui-sref=home data-toggle=collapse data-target=.navbar-collapse.in> <span class=\"glyphicon glyphicon-home\"></span> <span class=hidden-sm translate=global.menu.home>Home</span> </a> </li> <li ui-sref-active=active ng-switch-when=true class=\"dropdown pointer\"> <a class=dropdown-toggle data-toggle=dropdown href=\"\"> <span> <span class=\"glyphicon glyphicon-th-list\"></span> <span class=hidden-sm translate=global.menu.entities.main> Entities </span> <b class=caret></b> </span> </a> <ul class=dropdown-menu> <!-- JHipster will add entities to the menu here --> </ul> </li> <li ng-class=\"{active: $state.includes('account')}\" class=\"dropdown pointer\"> <a class=dropdown-toggle data-toggle=dropdown href=\"\"> <span> <span class=\"glyphicon glyphicon-user\"></span> <span class=hidden-sm translate=global.menu.account.main> Account </span> <b class=caret></b> </span> </a> <ul class=dropdown-menu> <li ui-sref-active=active ng-switch-when=true><a ui-sref=settings data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-wrench\"></span> &#xA0;<span translate=global.menu.account.settings>Settings</span></a></li> <li ui-sref-active=active ng-switch-when=true><a ui-sref=password data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-lock\"></span> &#xA0;<span translate=global.menu.account.password>Password</span></a></li> <li ui-sref-active=active ng-switch-when=true><a href=\"\" ng-click=logout() data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-log-out\"></span> &#xA0;<span translate=global.menu.account.logout>Sign out</span></a></li> <li ui-sref-active=active ng-switch-when=false><a ui-sref=login data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-log-in\"></span> &#xA0;<span translate=global.menu.account.login>Sign in</span></a></li> <li ui-sref-active=active ng-switch-when=false><a ui-sref=register data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-plus-sign\"></span> &#xA0;<span translate=global.menu.account.register>Register</span></a></li> </ul> </li> <li ng-class=\"{active: $state.includes('admin')}\" ng-switch-when=true has-authority=ROLE_ADMIN class=\"dropdown pointer\"> <a class=dropdown-toggle data-toggle=dropdown href=\"\"> <span> <span class=\"glyphicon glyphicon-tower\"></span> <span class=hidden-sm translate=global.menu.admin.main>Administration</span> <b class=caret></b> </span> </a> <ul class=dropdown-menu> <li ui-sref-active=active><a ui-sref=user-management data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-user\"></span> &#xA0;<span translate=global.menu.admin.user-management>User management</span></a></li> <li ui-sref-active=active><a ui-sref=metrics data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-dashboard\"></span> &#xA0;<span translate=global.menu.admin.metrics>Metrics</span></a></li> <li ui-sref-active=active><a ui-sref=health data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-heart\"></span> &#xA0;<span translate=global.menu.admin.health>Health</span></a></li> <li ui-sref-active=active><a ui-sref=configuration data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-list-alt\"></span> &#xA0;<span translate=global.menu.admin.configuration>Configuration</span></a></li> <li ui-sref-active=active><a ui-sref=audits data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-bell\"></span> &#xA0;<span translate=global.menu.admin.audits>Audits</span></a></li> <li ui-sref-active=active><a ui-sref=logs data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-tasks\"></span> &#xA0;<span translate=global.menu.admin.logs>Logs</span></a></li> <li ng-hide=inProduction ui-sref-active=active><a ui-sref=docs data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-book\"></span> &#xA0;<span translate=global.menu.admin.apidocs>API</span></a></li> <li ng-hide=inProduction><a href=/console target=_tab data-toggle=collapse data-target=.navbar-collapse.in><span class=\"glyphicon glyphicon-hdd\"></span> &#xA0;<span translate=global.menu.admin.database>Database</span></a></li> </ul> </li> <li ui-sref-active=active class=\"dropdown pointer\" ng-controller=LanguageController> <a class=dropdown-toggle data-toggle=dropdown href=\"\"> <span> <span class=\"glyphicon glyphicon-flag\"></span> <span class=hidden-sm translate=global.menu.language>Language</span> <b class=caret></b> </span> </a> <ul class=dropdown-menu> <li active-menu={{language}} ng-repeat=\"language in languages\"> <a href=\"\" ng-click=changeLanguage(language) data-toggle=collapse data-target=.navbar-collapse.in>{{language | findLanguageFromKey}}</a> </li> </ul> </li> </ul> </div> </div> </nav>"
  );

}]);
